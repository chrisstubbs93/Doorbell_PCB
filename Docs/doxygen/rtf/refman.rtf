{\rtf1\ansi\ansicpg1252\uc1 \deff0\deflang1033\deflangfe1033
{\fonttbl {\f0\froman\fcharset0\fprq2{\*\panose 02020603050405020304}Times New Roman;}
{\f1\fswiss\fcharset0\fprq2{\*\panose 020b0604020202020204}Arial;}
{\f2\fmodern\fcharset0\fprq1{\*\panose 02070309020205020404}Courier New;}
{\f3\froman\fcharset2\fprq2{\*\panose 05050102010706020507}Symbol;}
}
{\colortbl;\red0\green0\blue0;\red0\green0\blue255;\red0\green255\blue255;\red0\green255\blue0;\red255\green0\blue255;\red255\green0\blue0;\red255\green255\blue0;\red255\green255\blue255;\red0\green0\blue128;\red0\green128\blue128;\red0\green128\blue0;\red128\green0\blue128;\red128\green0\blue0;\red128\green128\blue0;\red128\green128\blue128;\red192\green192\blue192;\red0\green128\blue0;\red96\green64\blue32;\rede0\green128\blue0;\red128\green0\blue0;\red128\green96\blue32;\red0\green32\blue128;\red0\green128\blue128;\red255\green0\blue255;\red0\green0\blue0;\red112\green0\blue112;\red255\green0\blue0;}
{\stylesheet
{\widctlpar\adjustright \fs20\cgrid \snext0 Normal;}
{\paperw11900\paperh16840\margl1800\margr1800\margt1440\margb1440\gutter0\ltrsect}
{\s1\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs36\kerning36\cgrid \sbasedon0 \snext0 heading 1;}
{\s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid \sbasedon0 \snext0 heading 2;}
{\s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid \sbasedon0 \snext0 heading 3;}
{\s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid \sbasedon0 \snext0 heading 4;}{\*\cs10 \additive Default Paragraph Font;}
{\s5\sb90\sa30\keepn\widctlpar\adjustright \b\f1\fs20\cgrid \sbasedon0 \snext0 heading 5;}{\*\cs10 \additive Default Paragraph Font;}
{\s15\qc\sb240\sa60\widctlpar\outlinelevel0\adjustright \b\f1\fs32\kerning28\cgrid \sbasedon0 \snext15 Title;}
{\s16\qc\sa60\widctlpar\outlinelevel1\adjustright \f1\cgrid \sbasedon0 \snext16 Subtitle;}
{\s17\sa60\sb30\widctlpar\qj \fs22\cgrid \sbasedon0 \snext17 BodyText;}
{\s18\widctlpar\fs22\cgrid \sbasedon0 \snext18 DenseText;}
{\s28\widctlpar\tqc\tx4320\tqr\tx8640\adjustright \fs20\cgrid \sbasedon0 \snext28 header;}
{\s29\widctlpar\tqc\tx4320\tqr\tx8640\qr\adjustright \fs20\cgrid \sbasedon0 \snext29 footer;}
{\s30\li360\sa60\sb120\keepn\widctlpar\adjustright \b\f1\fs20\cgrid \sbasedon0 \snext30 GroupHeader;}
{\s40\li0\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid \sbasedon0 \snext41 Code Example 0;}
{\s41\li360\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid \sbasedon0 \snext42 Code Example 1;}
{\s42\li720\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid \sbasedon0 \snext43 Code Example 2;}
{\s43\li1080\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid \sbasedon0 \snext44 Code Example 3;}
{\s44\li1440\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid \sbasedon0 \snext45 Code Example 4;}
{\s45\li1800\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid \sbasedon0 \snext46 Code Example 5;}
{\s46\li2160\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid \sbasedon0 \snext47 Code Example 6;}
{\s47\li2520\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid \sbasedon0 \snext48 Code Example 7;}
{\s48\li2880\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid \sbasedon0 \snext49 Code Example 8;}
{\s49\li3240\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid \sbasedon0 \snext50 Code Example 9;}
{\s50\li3600\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid \sbasedon0 \snext51 Code Example 10;}
{\s51\li3960\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid \sbasedon0 \snext52 Code Example 11;}
{\s52\li4320\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid \sbasedon0 \snext53 Code Example 12;}
{\s53\li4680\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid \sbasedon0 \snext53 Code Example 13;}
{\s60\li0\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid \sbasedon0 \snext61 List Continue 0;}
{\s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid \sbasedon0 \snext62 List Continue 1;}
{\s62\li720\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid \sbasedon0 \snext63 List Continue 2;}
{\s63\li1080\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid \sbasedon0 \snext64 List Continue 3;}
{\s64\li1440\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid \sbasedon0 \snext65 List Continue 4;}
{\s65\li1800\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid \sbasedon0 \snext66 List Continue 5;}
{\s66\li2160\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid \sbasedon0 \snext67 List Continue 6;}
{\s67\li2520\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid \sbasedon0 \snext68 List Continue 7;}
{\s68\li2880\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid \sbasedon0 \snext69 List Continue 8;}
{\s69\li3240\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid \sbasedon0 \snext70 List Continue 9;}
{\s70\li3600\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid \sbasedon0 \snext71 List Continue 10;}
{\s71\li3960\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid \sbasedon0 \snext72 List Continue 11;}
{\s72\li4320\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid \sbasedon0 \snext73 List Continue 12;}
{\s73\li4680\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid \sbasedon0 \snext73 List Continue 13;}
{\s80\li0\widctlpar\ql\adjustright \fs20\cgrid \sbasedon0 \snext81 DescContinue 0;}
{\s81\li360\widctlpar\ql\adjustright \fs20\cgrid \sbasedon0 \snext82 DescContinue 1;}
{\s82\li720\widctlpar\ql\adjustright \fs20\cgrid \sbasedon0 \snext83 DescContinue 2;}
{\s83\li1080\widctlpar\ql\adjustright \fs20\cgrid \sbasedon0 \snext84 DescContinue 3;}
{\s84\li1440\widctlpar\ql\adjustright \fs20\cgrid \sbasedon0 \snext85 DescContinue 4;}
{\s85\li1800\widctlpar\ql\adjustright \fs20\cgrid \sbasedon0 \snext86 DescContinue 5;}
{\s86\li2160\widctlpar\ql\adjustright \fs20\cgrid \sbasedon0 \snext87 DescContinue 6;}
{\s87\li2520\widctlpar\ql\adjustright \fs20\cgrid \sbasedon0 \snext88 DescContinue 7;}
{\s88\li2880\widctlpar\ql\adjustright \fs20\cgrid \sbasedon0 \snext89 DescContinue 8;}
{\s89\li3240\widctlpar\ql\adjustright \fs20\cgrid \sbasedon0 \snext90 DescContinue 9;}
{\s90\li3600\widctlpar\ql\adjustright \fs20\cgrid \sbasedon0 \snext91 DescContinue 10;}
{\s91\li3960\widctlpar\ql\adjustright \fs20\cgrid \sbasedon0 \snext92 DescContinue 11;}
{\s92\li4320\widctlpar\ql\adjustright \fs20\cgrid \sbasedon0 \snext93 DescContinue 12;}
{\s93\li4680\widctlpar\ql\adjustright \fs20\cgrid \sbasedon0 \snext93 DescContinue 13;}
{\s100\li0\sa30\sb30\widctlpar\tqr\tldot\tx8640\adjustright \fs20\cgrid \sbasedon0 \snext101 LatexTOC 0;}
{\s101\li360\sa27\sb27\widctlpar\tqr\tldot\tx8640\adjustright \fs20\cgrid \sbasedon0 \snext102 LatexTOC 1;}
{\s102\li720\sa24\sb24\widctlpar\tqr\tldot\tx8640\adjustright \fs20\cgrid \sbasedon0 \snext103 LatexTOC 2;}
{\s103\li1080\sa21\sb21\widctlpar\tqr\tldot\tx8640\adjustright \fs20\cgrid \sbasedon0 \snext104 LatexTOC 3;}
{\s104\li1440\sa18\sb18\widctlpar\tqr\tldot\tx8640\adjustright \fs20\cgrid \sbasedon0 \snext105 LatexTOC 4;}
{\s105\li1800\sa15\sb15\widctlpar\tqr\tldot\tx8640\adjustright \fs20\cgrid \sbasedon0 \snext106 LatexTOC 5;}
{\s106\li2160\sa12\sb12\widctlpar\tqr\tldot\tx8640\adjustright \fs20\cgrid \sbasedon0 \snext107 LatexTOC 6;}
{\s107\li2520\sa9\sb9\widctlpar\tqr\tldot\tx8640\adjustright \fs20\cgrid \sbasedon0 \snext108 LatexTOC 7;}
{\s108\li2880\sa6\sb6\widctlpar\tqr\tldot\tx8640\adjustright \fs20\cgrid \sbasedon0 \snext109 LatexTOC 8;}
{\s109\li3240\sa3\sb3\widctlpar\tqr\tldot\tx8640\adjustright \fs20\cgrid \sbasedon0 \snext110 LatexTOC 9;}
{\s110\li3600\sa3\sb3\widctlpar\tqr\tldot\tx8640\adjustright \fs20\cgrid \sbasedon0 \snext111 LatexTOC 10;}
{\s111\li3960\sa3\sb3\widctlpar\tqr\tldot\tx8640\adjustright \fs20\cgrid \sbasedon0 \snext112 LatexTOC 11;}
{\s112\li4320\sa3\sb3\widctlpar\tqr\tldot\tx8640\adjustright \fs20\cgrid \sbasedon0 \snext113 LatexTOC 12;}
{\s113\li4680\sa3\sb3\widctlpar\tqr\tldot\tx8640\adjustright \fs20\cgrid \sbasedon0 \snext113 LatexTOC 13;}
{\s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid \sbasedon0 \snext121 \sautoupd List Bullet 0;}
{\s121\fi-360\li720\widctlpar\jclisttab\tx720{\*\pn \pnlvlbody\ilvl0\ls2\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid \sbasedon0 \snext122 \sautoupd List Bullet 1;}
{\s122\fi-360\li1080\widctlpar\jclisttab\tx1080{\*\pn \pnlvlbody\ilvl0\ls3\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid \sbasedon0 \snext123 \sautoupd List Bullet 2;}
{\s123\fi-360\li1440\widctlpar\jclisttab\tx1440{\*\pn \pnlvlbody\ilvl0\ls4\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid \sbasedon0 \snext124 \sautoupd List Bullet 3;}
{\s124\fi-360\li1800\widctlpar\jclisttab\tx1800{\*\pn \pnlvlbody\ilvl0\ls5\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid \sbasedon0 \snext125 \sautoupd List Bullet 4;}
{\s125\fi-360\li2160\widctlpar\jclisttab\tx2160{\*\pn \pnlvlbody\ilvl0\ls6\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid \sbasedon0 \snext126 \sautoupd List Bullet 5;}
{\s126\fi-360\li2520\widctlpar\jclisttab\tx2520{\*\pn \pnlvlbody\ilvl0\ls7\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid \sbasedon0 \snext127 \sautoupd List Bullet 6;}
{\s127\fi-360\li2880\widctlpar\jclisttab\tx2880{\*\pn \pnlvlbody\ilvl0\ls8\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid \sbasedon0 \snext128 \sautoupd List Bullet 7;}
{\s128\fi-360\li3240\widctlpar\jclisttab\tx3240{\*\pn \pnlvlbody\ilvl0\ls9\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid \sbasedon0 \snext129 \sautoupd List Bullet 8;}
{\s129\fi-360\li3600\widctlpar\jclisttab\tx3600{\*\pn \pnlvlbody\ilvl0\ls10\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid \sbasedon0 \snext130 \sautoupd List Bullet 9;}
{\s130\fi-360\li3960\widctlpar\jclisttab\tx3960{\*\pn \pnlvlbody\ilvl0\ls11\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid \sbasedon0 \snext131 \sautoupd List Bullet 10;}
{\s131\fi-360\li4320\widctlpar\jclisttab\tx4320{\*\pn \pnlvlbody\ilvl0\ls12\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid \sbasedon0 \snext132 \sautoupd List Bullet 11;}
{\s132\fi-360\li4680\widctlpar\jclisttab\tx4680{\*\pn \pnlvlbody\ilvl0\ls13\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid \sbasedon0 \snext133 \sautoupd List Bullet 12;}
{\s133\fi-360\li5040\widctlpar\jclisttab\tx5040{\*\pn \pnlvlbody\ilvl0\ls14\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid \sbasedon0 \snext133 \sautoupd List Bullet 13;}
{\s140\fi-360\li360\widctlpar\fs20\cgrid \sbasedon0 \snext141 \sautoupd List Enum 0;}
{\s141\fi-360\li720\widctlpar\fs20\cgrid \sbasedon0 \snext142 \sautoupd List Enum 1;}
{\s142\fi-360\li1080\widctlpar\fs20\cgrid \sbasedon0 \snext143 \sautoupd List Enum 2;}
{\s143\fi-360\li1440\widctlpar\fs20\cgrid \sbasedon0 \snext144 \sautoupd List Enum 3;}
{\s144\fi-360\li1800\widctlpar\fs20\cgrid \sbasedon0 \snext145 \sautoupd List Enum 4;}
{\s145\fi-360\li2160\widctlpar\fs20\cgrid \sbasedon0 \snext146 \sautoupd List Enum 5;}
{\s146\fi-360\li2520\widctlpar\fs20\cgrid \sbasedon0 \snext147 \sautoupd List Enum 6;}
{\s147\fi-360\li2880\widctlpar\fs20\cgrid \sbasedon0 \snext148 \sautoupd List Enum 7;}
{\s148\fi-360\li3240\widctlpar\fs20\cgrid \sbasedon0 \snext149 \sautoupd List Enum 8;}
{\s149\fi-360\li3600\widctlpar\fs20\cgrid \sbasedon0 \snext150 \sautoupd List Enum 9;}
{\s150\fi-360\li3960\widctlpar\fs20\cgrid \sbasedon0 \snext151 \sautoupd List Enum 10;}
{\s151\fi-360\li4320\widctlpar\fs20\cgrid \sbasedon0 \snext152 \sautoupd List Enum 11;}
{\s152\fi-360\li4680\widctlpar\fs20\cgrid \sbasedon0 \snext153 \sautoupd List Enum 12;}
{\s153\fi-360\li5040\widctlpar\fs20\cgrid \sbasedon0 \snext153 \sautoupd List Enum 13;}
}
{\info 
{\title {\comment Lecturer Availability Door Announcer  {\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
1.1 \par
}}Lecturer Availability Door Announcer}
{\comment Generated by doxygen.}
{\creatim \yr2019\mo4\dy9\hr22\min10\sec16}
}\pard\plain 
\sectd\pgnlcrm
{\footer \s29\widctlpar\tqc\tx4320\tqr\tx8640\qr\adjustright \fs20\cgrid {\chpgn}}
\pard\plain \s16\qc\sa60\widctlpar\outlinelevel1\adjustright \f1\cgrid 
\vertalc\qc\par\par\par\par\par\par\par
\pard\plain \s15\qc\sb240\sa60\widctlpar\outlinelevel0\adjustright \b\f1\fs32\kerning28\cgrid 
{\field\fldedit {\*\fldinst TITLE \\*MERGEFORMAT}{\fldrslt Lecturer Availability Door Announcer}}\par
\pard\plain \s16\qc\sa60\widctlpar\outlinelevel1\adjustright \f1\cgrid 
\par
\par\par\par\par\par\par\par\par\par\par\par\par
\pard\plain \s16\qc\sa60\widctlpar\outlinelevel1\adjustright \f1\cgrid 
{\field\fldedit {\*\fldinst AUTHOR \\*MERGEFORMAT}{\fldrslt AUTHOR}}\par
Version 1.1\par{\field\fldedit {\*\fldinst CREATEDATE \\*MERGEFORMAT}{\fldrslt Tue Apr 9 2019 }}\par
\page\page\vertalt
\pard\plain 
\s1\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs36\kerning36\cgrid Table of Contents\par
\pard\plain \par
{\field\fldedit {\*\fldinst TOC \\f \\*MERGEFORMAT}{\fldrslt Table of contents}}\par
\pard\plain 
\sect \sbkpage \pgndec \pgnrestart
\sect \sectd \sbknone
{\footer \s29\widctlpar\tqc\tx4320\tqr\tx8640\qr\adjustright \fs20\cgrid {\chpgn}}

\pard\plain \sect\sbknone
{\pard\widctlpar\brdrb\brdrs\brdrw75\brsp20 \adjustright \par}
\s1\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs36\kerning36\cgrid 
File Index\par \pard\plain 
{\tc \v File Index}
\pard\plain \s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
File List\par \pard\plain 
{
\pard\plain \s17\sa60\sb30\widctlpar\qj \fs22\cgrid Here is a list of all files with brief descriptions:}
{
\par
\pard\plain \s101\li360\sa27\sb27\widctlpar\tqr\tldot\tx8640\adjustright \fs20\cgrid 
{\b {\b bitmaps.h} } \tab {\field\fldedit {\*\fldinst PAGEREF AAAAAAAAAA \\*MERGEFORMAT}{\fldrslt pagenum}}
\par
{\b {\b Config.ino} } \tab {\field\fldedit {\*\fldinst PAGEREF AAAAAAAAAC \\*MERGEFORMAT}{\fldrslt pagenum}}
\par
{\b {\b Doorbell.ino} } \tab {\field\fldedit {\*\fldinst PAGEREF AAAAAAAAAH \\*MERGEFORMAT}{\fldrslt pagenum}}
\par
{\b {\b GUI.ino} } \tab {\field\fldedit {\*\fldinst PAGEREF AAAAAAAAAR \\*MERGEFORMAT}{\fldrslt pagenum}}
\par
{\b {\b Hardware.ino} } \tab {\field\fldedit {\*\fldinst PAGEREF AAAAAAAABD \\*MERGEFORMAT}{\fldrslt pagenum}}
\par
{\b {\b Settings.h} } \tab {\field\fldedit {\*\fldinst PAGEREF AAAAAAAABY \\*MERGEFORMAT}{\fldrslt pagenum}}
\par
{\b {\b Settings_template.h} } \tab {\field\fldedit {\*\fldinst PAGEREF AAAAAAAACN \\*MERGEFORMAT}{\fldrslt pagenum}}
\par
{\b {\b Web.ino} } \tab {\field\fldedit {\*\fldinst PAGEREF AAAAAAAADC \\*MERGEFORMAT}{\fldrslt pagenum}}
\par
\par}
\pard\plain \sect\sbknone
{\pard\widctlpar\brdrb\brdrs\brdrw75\brsp20 \adjustright \par}
\s1\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs36\kerning36\cgrid 
File Documentation{\tc \v File Documentation}
\par \pard\plain 
\pard\plain \s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
bitmaps.h File Reference\par \pard\plain 
{\tc\tcl2 \v bitmaps.h}
{\xe \v bitmaps.h}
{\bkmkstart AAAAAAAAAA}
{\bkmkend AAAAAAAAAA}
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Variables\par
\pard\plain 

{
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
const unsigned char BmpLSBU [] {\b PROGMEM}\par
}
{\pard\widctlpar\brdrb\brdrs\brdrw5\brsp20 \adjustright \par}
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Detailed Description\par
\pard\plain 
{
\pard\plain \s17\sa60\sb30\widctlpar\qj \fs22\cgrid {\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
Stores bitmap images for display in program memory \par
}}
{\pard\widctlpar\brdrb\brdrs\brdrw5\brsp20 \adjustright \par}
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Variable Documentation\par
\pard\plain 
{\xe \v PROGMEM\:bitmaps.h}
{\xe \v bitmaps.h\:PROGMEM}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
const unsigned char BmpLSBU [] PROGMEM}}
\par
{\bkmkstart AAAAAAAAAB}
{\bkmkend AAAAAAAAAB}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
{\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
The LSBU logo stored as an array.\par
Generated from {\f2 http://javl.github.io/image2cpp/}\par
Invert colours. \par
}{
Definition at line 15 of file bitmaps.h.}\par
}
\par \pard\plain 

\pard\plain \sect\sbknone
{\pard\widctlpar\brdrb\brdremboss\brdrw15\brsp20 \adjustright \par}
\s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
\pard\plain \s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
Config.ino File Reference\par \pard\plain 
{\tc\tcl2 \v Config.ino}
{\xe \v Config.ino}
{\bkmkstart AAAAAAAAAC}
{\bkmkend AAAAAAAAAC}
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Functions\par
\pard\plain 

{
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
void {\b initFS} ()\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
bool {\b loadConfig} ()\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
bool {\b saveConfig} ()\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
String {\b rot} (String in)\par
}
{\pard\widctlpar\brdrb\brdrs\brdrw5\brsp20 \adjustright \par}
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Detailed Description\par
\pard\plain 
{
\pard\plain \s17\sa60\sb30\widctlpar\qj \fs22\cgrid {\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
Handles SPIFFS filesystem, loading of configuration files, saving of configuration files. \par
}}
{\pard\widctlpar\brdrb\brdrs\brdrw5\brsp20 \adjustright \par}
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Function Documentation\par
\pard\plain 
{\xe \v initFS\:Config.ino}
{\xe \v Config.ino\:initFS}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
void initFS ()}}
\par
{\bkmkstart AAAAAAAAAD}
{\bkmkend AAAAAAAAAD}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
{\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
Try to initialize the filesystem. Format the SPIFFS on error and try again (this is normal for first use). \par
}{
Definition at line 7 of file Config.ino.}\par
{
\pard\plain \s41\li360\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid     7               \{\par
    8   Serial.println({\cf22 "[INFO] Mounting filesystem..."});\par
    9   {\cf19 if} (!SPIFFS.begin()) \{\par
   10     errorMsg({\cf22 "Failed to mount file sys.\\nAttempting to format.\\nThis is normal for 1st use.\\nPlease wait 30 seconds."});\par
   11     SPIFFS.format();\par
   12     {\cf19 if} (SPIFFS.begin()) \{\par
   13       Serial.println({\cf22 "[INFO] SPIFFS format complete"});\par
   14     \} {\cf19 else} \{\par
   15       {\cf19 return};\par
   16     \}\par
   17   \}\par
   18   delay(10);\par
   19 \}\par
}
}
{\xe \v loadConfig\:Config.ino}
{\xe \v Config.ino\:loadConfig}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
bool loadConfig ()}}
\par
{\bkmkstart AAAAAAAAAE}
{\bkmkend AAAAAAAAAE}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
{\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
Try to load the configuration JSON file contents into their variables. \par
}{
Definition at line 22 of file Config.ino.}\par
{
\pard\plain \s41\li360\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid    22                   \{\par
   23   File configFile = SPIFFS.open({\cf22 "/config.json"}, {\cf22 "r"});\par
   24   {\cf19 if} (!configFile) \{\par
   25     errorMsg({\cf22 "Failed to open config file"});\par
   26     settingMode = {\cf17 true};\par
   27     {\cf19 return} {\cf17 false};\par
   28   \}\par
   29   {\cf18 size_t} size = configFile.size();\par
   30   {\cf19 if} (size > 1024) \{\par
   31     errorMsg({\cf22 "Config file size is too large"});\par
   32     settingMode = {\cf17 true};\par
   33     {\cf19 return} {\cf17 false};\par
   34   \}\par
   35   std::unique_ptr<char[]> buf({\cf17 new} {\cf18 char}[size]);  {\cf20 // Allocate a buffer to store contents of the file.}\par
   36   configFile.readBytes(buf.get(), size); {\cf20 //Mutable buffer}\par
   37   StaticJsonBuffer<5000> jsonBuffer;\par
   38   JsonObject& json = jsonBuffer.parseObject(buf.get());\par
   39   {\cf19 if} (!json.success()) \{\par
   40     errorMsg({\cf22 "Failed to parse cfg file.\\nThis is normal for 1st use."});\par
   41     settingMode = {\cf17 true};\par
   42     {\cf19 return} {\cf17 false};\par
   43   \}\par
   44   {\cf20 //Restore basic device settings}\par
   45   EAP_IDENTITY = ({\cf17 const} {\cf18 char}*)json[{\cf22 "EAP_IDENTITY"}];\par
   46   EAP_PASSWORD = ({\cf17 const} {\cf18 char}*)json[{\cf22 "EAP_PASSWORD"}];\par
   47   ssid = ({\cf17 const} {\cf18 char}*)json[{\cf22 "ssid"}];\par
   48   wifipsk = ({\cf17 const} {\cf18 char}*)json[{\cf22 "wifipsk"}];\par
   49   www_username = ({\cf17 const} {\cf18 char}*)json[{\cf22 "www_username"}];\par
   50   www_password = ({\cf17 const} {\cf18 char}*)json[{\cf22 "www_password"}];\par
   51   room = ({\cf17 const} {\cf18 char}*)json[{\cf22 "room"}];\par
   52   thres = json[{\cf22 "thres"}];\par
   53   busyNotif = json[{\cf22 "busyNotif"}];\par
   54   powerSave = json[{\cf22 "powerSave"}];\par
   55   sleepDelay = json[{\cf22 "sleepDelay"}];\par
   56   {\cf19 if} (sleepDelay < 1) sleepDelay = 1; {\cf20 //coerce to greater than zero}\par
   57 \par
   58   {\cf20 //Restore lecturer details}\par
   59   {\cf19 for} ({\cf18 int} i = 0; i < 5; i++) \{\par
   60     lecturerNames[i] = ({\cf17 const} {\cf18 char}*)json[{\cf22 "lecturerNames"}][(String)i];\par
   61     lecturerIFTTkeys[i] = ({\cf17 const} {\cf18 char}*)json[{\cf22 "lecturerIFTTkeys"}][(String)i];\par
   62     lecturerStatus[i] = ({\cf17 const} {\cf18 char}*)json[{\cf22 "lecturerStatus"}][(String)i];\par
   63   \}\par
   64 \par
   65   {\cf20 //Serial.print("[INFO] Parameters loaded:");}\par
   66   {\cf20 //json.printTo(Serial);}\par
   67   {\cf20 //Serial.println();}\par
   68   {\cf19 return} {\cf17 true};\par
   69 \}\par
}
}
{\xe \v rot\:Config.ino}
{\xe \v Config.ino\:rot}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
String rot (String  {\i in})}}
\par
{\bkmkstart AAAAAAAAAF}
{\bkmkend AAAAAAAAAF}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
{\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
ROT13 encryption algorithm. \par
}{
Definition at line 115 of file Config.ino.}\par
{
\pard\plain \s41\li360\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid   115                       \{\par
  116   String out;\par
  117   {\cf19 for} ({\cf18 int} i = 0; i < in.length(); ++i) \{\par
  118     {\cf19 if} (isalpha(in[i])) \{\par
  119       {\cf19 if} (in[i] >= {\cf23 'a'} && in[i] <= {\cf23 'm'}) \{\par
  120         out += char(in[i] + 13);\par
  121       \} {\cf19 else} {\cf19 if} (in[i] >= {\cf23 'n'} && in[i] <= {\cf23 'z'}) \{\par
  122         out += char(in[i] - 13);\par
  123       \} {\cf19 else} {\cf19 if} (in[i] >= {\cf23 'A'} && in[i] <= {\cf23 'M'}) \{\par
  124         out += char(in[i] + 13);\par
  125       \} {\cf19 else} {\cf19 if} (in[i] >= {\cf23 'N'} && in[i] <= {\cf23 'Z'}) \{\par
  126         out += char(in[i] - 13);\par
  127       \}\par
  128     \} {\cf19 else} \{\par
  129       out += char(in[i]);\par
  130     \}\par
  131   \}\par
  132   {\cf19 return} out;\par
  133 \}\par
}
}
{\xe \v saveConfig\:Config.ino}
{\xe \v Config.ino\:saveConfig}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
bool saveConfig ()}}
\par
{\bkmkstart AAAAAAAAAG}
{\bkmkend AAAAAAAAAG}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
{\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
Save the config variable to the configuration JSON file. \par
}{
Definition at line 72 of file Config.ino.}\par
{
\pard\plain \s41\li360\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid    72                   \{\par
   73   StaticJsonBuffer<5000> jsonBuffer;\par
   74   JsonObject& json = jsonBuffer.createObject();\par
   75   {\cf20 //Store basic device settings}\par
   76   json[{\cf22 "EAP_IDENTITY"}] = EAP_IDENTITY;\par
   77   json[{\cf22 "EAP_PASSWORD"}] = EAP_PASSWORD;\par
   78   json[{\cf22 "ssid"}] = ssid;\par
   79   json[{\cf22 "wifipsk"}] = wifipsk;\par
   80   json[{\cf22 "www_username"}] = www_username;\par
   81   json[{\cf22 "www_password"}] = www_password;\par
   82   json[{\cf22 "room"}] = room;\par
   83   json[{\cf22 "thres"}] = thres;\par
   84   json[{\cf22 "busyNotif"}] = busyNotif;\par
   85   json[{\cf22 "powerSave"}] = powerSave;\par
   86   json[{\cf22 "sleepDelay"}] = sleepDelay;\par
   87 \par
   88   {\cf20 //Store lecturer details}\par
   89   JsonObject& jsonLecNames = jsonBuffer.createObject();\par
   90   JsonObject& jsonLecKeys = jsonBuffer.createObject();\par
   91   JsonObject& jsonLecStatus = jsonBuffer.createObject();\par
   92   {\cf19 for} ({\cf18 int} i = 0; i < 5; i++) \{\par
   93     jsonLecNames[(String)i] = lecturerNames[i];\par
   94     jsonLecKeys[(String)i] = lecturerIFTTkeys[i];\par
   95     jsonLecStatus[(String)i] = lecturerStatus[i];\par
   96   \}\par
   97   json[{\cf22 "lecturerNames"}] = jsonLecNames;\par
   98   json[{\cf22 "lecturerIFTTkeys"}] = jsonLecKeys;\par
   99   json[{\cf22 "lecturerStatus"}] = jsonLecStatus;\par
  100 \par
  101   {\cf20 //Serial.print("[INFO] Parameters stored:");}\par
  102   {\cf20 //json.printTo(Serial);}\par
  103   {\cf20 //Serial.println();}\par
  104 \par
  105   File configFile = SPIFFS.open({\cf22 "/config.json"}, {\cf22 "w"});\par
  106   {\cf19 if} (!configFile) \{\par
  107     Serial.println({\cf22 "[ERROR] Failed to open config file for writing"});\par
  108     {\cf19 return} {\cf17 false};\par
  109   \}\par
  110   json.printTo(configFile);\par
  111   {\cf19 return} {\cf17 true};\par
  112 \}\par
}
}
\par \pard\plain 

\pard\plain \sect\sbknone
{\pard\widctlpar\brdrb\brdremboss\brdrw15\brsp20 \adjustright \par}
\s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
\pard\plain \s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
Doorbell.ino File Reference\par \pard\plain 
{\tc\tcl2 \v Doorbell.ino}
{\xe \v Doorbell.ino}
{\bkmkstart AAAAAAAAAH}
{\bkmkend AAAAAAAAAH}
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Functions\par
\pard\plain 

{
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
GxIO_Class {\b io} (SPI, 15, 4, 5)\par
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid {\i {\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
Define the hardware pins used by the ePaper display for SPI. 15=CS, 4=DC, 5=RST. }{
}\par
}\par}
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
GxEPD_Class {\b display} ({\b io}, 5, 16)\par
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid {\i {\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
Define the hardware pins used by the ePaper display for control. 5=RST, 16=BUSY.. }{
}\par
}\par}
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
WebServer {\b webServer} (80)\par
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid {\i {\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
Web server used for setup wizard and config interface. }{
}\par
}\par}
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
void {\b setup} ()\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
void {\b loop} ()\par
}
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Variables\par
\pard\plain 

{
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
DNSServer {\b dnsServer}\par
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid {\i {\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
DNS server used for captive portal in setup mode. }{
}\par
}\par}
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
boolean {\b settingMode}\par
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid {\i {\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
Is the device in setup wizard mode (true) or normal mode (false)? }{
}\par
}\par}
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
int {\b doorbells} = 0\par
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid {\i {\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
Number of VCNL4020 sensors detected. }{
}\par
}\par}
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
bool {\b sleeping} = false\par
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid {\i {\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
Is the device in or about to enter deep sleep mode for power saving? }{
}\par
}\par}
}
{\pard\widctlpar\brdrb\brdrs\brdrw5\brsp20 \adjustright \par}
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Detailed Description\par
\pard\plain 
{
\pard\plain \s17\sa60\sb30\widctlpar\qj \fs22\cgrid {\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
Main file for the Lecturer Availability Door Announcer final year BEng project by Chris Stubbs. \par
}}
{\pard\widctlpar\brdrb\brdrs\brdrw5\brsp20 \adjustright \par}
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Function Documentation\par
\pard\plain 
{\xe \v display\:Doorbell.ino}
{\xe \v Doorbell.ino\:display}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
GxEPD_Class display ({\b io} , 5 , 16 )}}
\par
{\bkmkstart AAAAAAAAAI}
{\bkmkend AAAAAAAAAI}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
\par
{
{\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
Define the hardware pins used by the ePaper display for control. 5=RST, 16=BUSY.. }}\par
}
{\xe \v io\:Doorbell.ino}
{\xe \v Doorbell.ino\:io}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
GxIO_Class io (SPI , 15 , 4 , 5 )}}
\par
{\bkmkstart AAAAAAAAAJ}
{\bkmkend AAAAAAAAAJ}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
\par
{
{\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
Define the hardware pins used by the ePaper display for SPI. 15=CS, 4=DC, 5=RST. }}\par
}
{\xe \v loop\:Doorbell.ino}
{\xe \v Doorbell.ino\:loop}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
void loop ()}}
\par
{\bkmkstart AAAAAAAAAK}
{\bkmkend AAAAAAAAAK}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
{\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
Loop function runs continuously. Poll devices and run background tasks. \par
}{
Definition at line 77 of file Doorbell.ino.}\par
{
\pard\plain \s41\li360\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid    77             \{\par
   78   wifiTasks();\par
   79   scanVCNLs();\par
   80   checkButtons();\par
   81   manageSleep();\par
   82   delay(SCAN_INTERVAL);\par
   83 \}\par
}
}
{\xe \v setup\:Doorbell.ino}
{\xe \v Doorbell.ino\:setup}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
void setup ()}}
\par
{\bkmkstart AAAAAAAAAL}
{\bkmkend AAAAAAAAAL}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
{\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
Setup function runs once on startup. Detect boot mode (normal or waking up from deep sleep). Perform setup. \par
}{
Definition at line 36 of file Doorbell.ino.}\par
{
\pard\plain \s41\li360\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid    36              \{\par
   37   Wire.begin();\par
   38   Serial.begin(115200);\par
   39   Serial.println((String){\cf22 "[INFO] Lecturer availability door announcer version "} + (String)VERSION);\par
   40   wakeup_reason();\par
   41   display.init();\par
   42   initGPIO();\par
   43   {\cf19 if} (bootmode() == 6) displayVersion();\par
   44   initFS();\par
   45   {\cf18 bool} configstatus = loadConfig();\par
   46   {\cf19 if} (bootmode() == 3) \{ {\cf20 //wakeup cause by timer. Update battery % on screen and go back to sleep.}\par
   47     sleeping = {\cf17 true}; {\cf20 //set the sleeping flag}\par
   48     writeNames(); {\cf20 //show the sleeping flag on screen}\par
   49     entersleep(); {\cf20 //go to sleep}\par
   50   \}\par
   51   {\cf19 if} (configstatus) \{\par
   52     {\cf20 //Config loaded OK. Try to connect to WiFi.}\par
   53     {\cf19 if} (connectWiFi()) \{\par
   54       {\cf20 //WiFi connected OK. Start config web server and continue boot.}\par
   55       startWebServer();\par
   56     \} {\cf19 else} \{\par
   57       {\cf20 //WiFi failed to connect. Start setup mode and abort boot.}\par
   58       setupMode();\par
   59       {\cf19 return};\par
   60     \}\par
   61   \}\par
   62   {\cf19 else} \{\par
   63     setupMode();\par
   64     {\cf19 return}; {\cf20 //abort boot to carry out initial setup wizard}\par
   65   \}\par
   66   detectVCNLs();\par
   67   {\cf19 if} (bootmode() == 1) \{\par
   68     {\cf18 int} source = interruptSource();\par
   69     Serial.println((String){\cf22 "[INFO] Interrupt triggered by sensor "} + interruptSource());\par
   70     ring(source);\par
   71   \}\par
   72   calibrateVCNLs();\par
   73   writeNames();\par
   74 \}\par
}
}
{\xe \v webServer\:Doorbell.ino}
{\xe \v Doorbell.ino\:webServer}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
WebServer webServer (80 )}}
\par
{\bkmkstart AAAAAAAAAM}
{\bkmkend AAAAAAAAAM}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
\par
{
{\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
Web server used for setup wizard and config interface. }}\par
}
{\pard\widctlpar\brdrb\brdrs\brdrw5\brsp20 \adjustright \par}
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Variable Documentation\par
\pard\plain 
{\xe \v dnsServer\:Doorbell.ino}
{\xe \v Doorbell.ino\:dnsServer}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
DNSServer dnsServer}}
\par
{\bkmkstart AAAAAAAAAN}
{\bkmkend AAAAAAAAAN}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
\par
{
{\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
DNS server used for captive portal in setup mode. }}\par
{
Definition at line 29 of file Doorbell.ino.}\par
}
{\xe \v doorbells\:Doorbell.ino}
{\xe \v Doorbell.ino\:doorbells}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
int doorbells = 0}}
\par
{\bkmkstart AAAAAAAAAO}
{\bkmkend AAAAAAAAAO}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
\par
{
{\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
Number of VCNL4020 sensors detected. }}\par
{
Definition at line 32 of file Doorbell.ino.}\par
}
{\xe \v settingMode\:Doorbell.ino}
{\xe \v Doorbell.ino\:settingMode}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
boolean settingMode}}
\par
{\bkmkstart AAAAAAAAAP}
{\bkmkend AAAAAAAAAP}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
\par
{
{\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
Is the device in setup wizard mode (true) or normal mode (false)? }}\par
{
Definition at line 31 of file Doorbell.ino.}\par
}
{\xe \v sleeping\:Doorbell.ino}
{\xe \v Doorbell.ino\:sleeping}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
bool sleeping = false}}
\par
{\bkmkstart AAAAAAAAAQ}
{\bkmkend AAAAAAAAAQ}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
\par
{
{\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
Is the device in or about to enter deep sleep mode for power saving? }}\par
{
Definition at line 33 of file Doorbell.ino.}\par
}
\par \pard\plain 

\pard\plain \sect\sbknone
{\pard\widctlpar\brdrb\brdremboss\brdrw15\brsp20 \adjustright \par}
\s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
\pard\plain \s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
GUI.ino File Reference\par \pard\plain 
{\tc\tcl2 \v GUI.ino}
{\xe \v GUI.ino}
{\bkmkstart AAAAAAAAAR}
{\bkmkend AAAAAAAAAR}
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Functions\par
\pard\plain 

{
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
void {\b displayVersion} ()\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
void {\b errorMsg} (String ermsg)\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
void {\b setupMsg} (String {\b apSSID})\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
void {\b writeNames} ()\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
void {\b addToLog} (const String n)\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
void {\b displayLog} ()\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
void {\b clearLog} ()\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
void {\b showInfo} ()\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
String {\b wordWrap} (String in)\par
}
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Variables\par
\pard\plain 

{
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
String {\b logbuffer} [8] = \{ "", "", "", "", "", "", "", "" \}\par
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid {\i {\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
Buffer of last 8 log messages to show on screen. FIFO queue. }{
}\par
}\par}
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
const GFXfont * {\b font} = &FreeMonoBold9pt7b\par
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid {\i {\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
Define the font used for the GUI. }{
}\par
}\par}
}
{\pard\widctlpar\brdrb\brdrs\brdrw5\brsp20 \adjustright \par}
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Detailed Description\par
\pard\plain 
{
\pard\plain \s17\sa60\sb30\widctlpar\qj \fs22\cgrid {\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
Handles drawing of GUI elements on ePaper display \par
}}
{\pard\widctlpar\brdrb\brdrs\brdrw5\brsp20 \adjustright \par}
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Function Documentation\par
\pard\plain 
{\xe \v addToLog\:GUI.ino}
{\xe \v GUI.ino\:addToLog}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
void addToLog (const String  {\i n})}}
\par
{\bkmkstart AAAAAAAAAS}
{\bkmkend AAAAAAAAAS}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
{\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
Shuffle the log buffer and add a new time. Display log. \par
}{
Definition at line 115 of file GUI.ino.}\par
{
\pard\plain \s41\li360\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid   116 \{\par
  117   {\cf19 for} ({\cf18 int} i = 0; i < 7; i++) \{\par
  118     logbuffer[i] = logbuffer[i + 1];\par
  119   \}\par
  120   logbuffer[7] = n;\par
  121   displayLog();\par
  122 \}\par
}
}
{\xe \v clearLog\:GUI.ino}
{\xe \v GUI.ino\:clearLog}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
void clearLog ()}}
\par
{\bkmkstart AAAAAAAAAT}
{\bkmkend AAAAAAAAAT}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
{\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
Remove all entries in the log buffer. \par
}{
Definition at line 139 of file GUI.ino.}\par
{
\pard\plain \s41\li360\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid   140 \{\par
  141   {\cf19 for} ({\cf18 int} i = 0; i <= 7; i++) \{\par
  142     logbuffer[i] = {\cf22 ""};\par
  143   \}\par
  144 \}\par
}
}
{\xe \v displayLog\:GUI.ino}
{\xe \v GUI.ino\:displayLog}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
void displayLog ()}}
\par
{\bkmkstart AAAAAAAAAU}
{\bkmkend AAAAAAAAAU}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
{\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
Display all log items in the buffer, most recent at the bottom. \par
}{
Definition at line 125 of file GUI.ino.}\par
{
\pard\plain \s41\li360\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid   126 \{\par
  127   display.setRotation(1);\par
  128   display.fillScreen(GxEPD_WHITE);\par
  129   display.setTextColor(GxEPD_BLACK);\par
  130   display.setFont(font);\par
  131   display.setCursor(0, 0);\par
  132   {\cf19 for} ({\cf18 int} i = 0; i < 8; i++) \{\par
  133     display.println(logbuffer[i]);\par
  134   \}\par
  135   display.update();\par
  136 \}\par
}
}
{\xe \v displayVersion\:GUI.ino}
{\xe \v GUI.ino\:displayVersion}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
void displayVersion ()}}
\par
{\bkmkstart AAAAAAAAAV}
{\bkmkend AAAAAAAAAV}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
{\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
Displays an LSBU splashscreen followed by a description/version no. splashscreen. \par
}{
Definition at line 11 of file GUI.ino.}\par
{
\pard\plain \s41\li360\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid    12 \{\par
   13   {\cf20 //set up parameters}\par
   14   display.setRotation(1);\par
   15   display.fillScreen(GxEPD_WHITE);\par
   16   display.setTextColor(GxEPD_BLACK);\par
   17   display.setFont(font);\par
   18   {\cf20 //show LSBU logo}\par
   19   display.drawBitmap(0, 0, BmpLSBU, 296, 128, GxEPD_BLACK);\par
   20   display.update();\par
   21   delay(2000);\par
   22   {\cf20 //Show version}\par
   23   display.fillScreen(GxEPD_WHITE);\par
   24   display.setCursor(0, 0);\par
   25   display.println();\par
   26   display.println({\cf22 "Lecturer availability door"});\par
   27   display.println({\cf22 "announcer"});\par
   28   display.println();\par
   29   display.println({\cf22 "Final year BEng project"});\par
   30   display.println({\cf22 "By Chris Stubbs 2018/19"});\par
   31   display.println((String){\cf22 "FW Revision: "} + (String)VERSION);\par
   32   display.println({\cf22 "Starting up..."});\par
   33   display.update();\par
   34   delay(3000);\par
   35 \}\par
}
}
{\xe \v errorMsg\:GUI.ino}
{\xe \v GUI.ino\:errorMsg}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
void errorMsg (String  {\i ermsg})}}
\par
{\bkmkstart AAAAAAAAAW}
{\bkmkend AAAAAAAAAW}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
{\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
Displays a full screen error message with title and content for 5 seconds. Can be dismissed by pressing either button. Message is also printed to the serial port and the ERROR LED flashed. \par
}{
Definition at line 38 of file GUI.ino.}\par
{
\pard\plain \s41\li360\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid    39 \{\par
   40   digitalWrite(LEDERRPIN, HIGH);\par
   41   String tmpermsg = ermsg;\par
   42   tmpermsg.replace({\cf22 "\\n"}, {\cf22 " "});\par
   43   Serial.println({\cf22 "[ERROR] "} + tmpermsg);\par
   44   display.setRotation(1);\par
   45   display.fillScreen(GxEPD_WHITE);\par
   46   display.setTextColor(GxEPD_BLACK);\par
   47   display.setFont(font);\par
   48   display.setCursor(0, 0);\par
   49   display.println();\par
   50   display.println({\cf22 "!!!----!!! Error !!!----!!!"});\par
   51   display.println(ermsg);\par
   52   display.update();\par
   53   {\cf18 unsigned} {\cf18 long} tmr = millis();\par
   54   {\cf19 while} ((millis() - tmr < 5000)) \{\par
   55     {\cf19 if} (digitalRead(BTNAPIN)) {\cf19 break}; {\cf20 //allow button press to dismiss error}\par
   56     {\cf19 if} (digitalRead(BTNBPIN)) {\cf19 break};\par
   57   \}\par
   58   digitalWrite(LEDERRPIN, LOW);\par
   59 \}\par
}
}
{\xe \v setupMsg\:GUI.ino}
{\xe \v GUI.ino\:setupMsg}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
void setupMsg (String  {\i apSSID})}}
\par
{\bkmkstart AAAAAAAAAX}
{\bkmkend AAAAAAAAAX}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
{\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
Instructs user to connect to access point and run setup wizard. \par
}{
Definition at line 62 of file GUI.ino.}\par
{
\pard\plain \s41\li360\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid    63 \{\par
   64   Serial.println((String){\cf22 "[INFO] Starting config access point named "} + apSSID);\par
   65   Serial.println((String){\cf22 "[INFO] Starting config web server at "} + WiFi.softAPIP().toString());\par
   66   display.setRotation(1);\par
   67   display.fillScreen(GxEPD_WHITE);\par
   68   display.setTextColor(GxEPD_BLACK);\par
   69   display.setFont(font);\par
   70   display.setCursor(0, 14);\par
   71   display.println({\cf22 "------- Config Mode -------"});\par
   72   display.println({\cf22 "Scan for access points"});\par
   73   display.println({\cf22 "and connect to "} + apSSID + {\cf22 "."});\par
   74   display.println();\par
   75   display.println({\cf22 "Go to "} + WiFi.softAPIP().toString());\par
   76   display.println({\cf22 "to set up."});\par
   77   display.update();\par
   78 \}\par
}
}
{\xe \v showInfo\:GUI.ino}
{\xe \v GUI.ino\:showInfo}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
void showInfo ()}}
\par
{\bkmkstart AAAAAAAAAY}
{\bkmkend AAAAAAAAAY}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
{\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
Shows simple menu with FW version, IP, n sensors found. Also allows user to initiate a reset of the device configuration. \par
}{
Definition at line 147 of file GUI.ino.}\par
{
\pard\plain \s41\li360\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid   147                 \{\par
  148   {\cf20 //set up parameters}\par
  149   {\cf18 bool} shown = {\cf17 false};\par
  150   {\cf19 while} (!shown) \{\par
  151     display.setRotation(1);\par
  152     display.fillScreen(GxEPD_WHITE);\par
  153     display.setTextColor(GxEPD_BLACK);\par
  154     display.setFont(font);\par
  155     display.fillScreen(GxEPD_WHITE);\par
  156     display.setCursor(0, 14);\par
  157     display.println((String){\cf22 "FW Revision: "} + (String)VERSION);\par
  158     display.println({\cf22 "IP addr: "} + WiFi.localIP().toString());\par
  159     display.println({\cf22 "Connected to "} + ssid);\par
  160     display.println((String)doorbells + {\cf22 " sensors found"});\par
  161     display.println();\par
  162     display.println();\par
  163     display.println({\cf22 "[A]-Close  [B]-Reset"});\par
  164     display.update();\par
  165     shown = {\cf17 true};\par
  166     {\cf19 while} (digitalRead(BTNAPIN)) \{\}\par
  167     {\cf18 unsigned} {\cf18 long} tmr = millis();\par
  168     {\cf19 while} ((millis() - tmr < 60000)) \{\par
  169       wifiTasks();{\cf20 //Run WiFi background tasks while waiting}\par
  170       {\cf19 if} (digitalRead(BTNAPIN)) {\cf19 break};\par
  171       {\cf19 if} (digitalRead(BTNBPIN)) \{\par
  172         {\cf19 while} (digitalRead(BTNBPIN)) \{\}\par
  173         display.fillScreen(GxEPD_WHITE);\par
  174         Serial.println({\cf22 "Are you sure you want to\\nreset this device?"});\par
  175         display.setCursor(0, 14);\par
  176         display.println({\cf22 "Are you sure you want to"});\par
  177         display.println({\cf22 "reset this device?"});\par
  178         display.println();\par
  179         display.println({\cf22 "All settings will be lost."});\par
  180         display.println();\par
  181         display.println({\cf22 "[A]-No"});\par
  182         display.println({\cf22 "[B]-Yes (hold for 5 sec)"});\par
  183         display.update();\par
  184         {\cf19 if} (digitalRead(BTNAPIN)) {\cf19 break};\par
  185         {\cf19 while} (1) \{\par
  186           {\cf19 if} (digitalRead(BTNAPIN)) \{\par
  187             shown = {\cf17 false};\par
  188             {\cf19 break};\par
  189           \}\par
  190           {\cf19 if} (digitalRead(BTNBPIN)) \{\par
  191             {\cf18 unsigned} {\cf18 long} tmr2 = millis();\par
  192             {\cf19 while} (digitalRead(BTNBPIN)) \{\par
  193               {\cf19 if} ((millis() - tmr2 > 5000)) \{\par
  194                 {\cf20 //Clear settings and restart}\par
  195                 SPIFFS.remove({\cf22 "/config.json"});\par
  196                 delay(1000);\par
  197                 ESP.restart();\par
  198               \}\par
  199             \}\par
  200           \}\par
  201         \}\par
  202       \}\par
  203     \}\par
  204   \}\par
  205   writeNames();\par
  206 \}\par
}
}
{\xe \v wordWrap\:GUI.ino}
{\xe \v GUI.ino\:wordWrap}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
String wordWrap (String  {\i in})}}
\par
{\bkmkstart AAAAAAAAAZ}
{\bkmkend AAAAAAAAAZ}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
{\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
Wrap words around spaces to print nicely on screen. \par
}{
Definition at line 209 of file GUI.ino.}\par
{
\pard\plain \s41\li360\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid   209                            \{\par
  210   {\cf19 if} (in.length() > 27) \{\par
  211     {\cf19 for} ({\cf18 int} i = 27; i > 1; i--) \{ {\cf20 //work backwards from limit of string to first space}\par
  212       {\cf19 if} (in.charAt(i) == {\cf23 ' '}) \{\par
  213         {\cf19 return} (in.substring(0, i) + {\cf22 "\\n"} + in.substring(i + 1, in.length())); {\cf20 //there is a space to replace with a line break}\par
  214       \}\par
  215     \}\par
  216     {\cf19 return} in; {\cf20 //There were no spaces to replace, return plain string}\par
  217   \} {\cf19 else} \{\par
  218     {\cf19 return} in; {\cf20 //String will fit on screen, return plain string}\par
  219   \}\par
  220 \}\par
}
}
{\xe \v writeNames\:GUI.ino}
{\xe \v GUI.ino\:writeNames}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
void writeNames ()}}
\par
{\bkmkstart AAAAAAAABA}
{\bkmkend AAAAAAAABA}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
{\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
Write the room name, all lecturer names, status, battery percentage and sleep status to the display. \par
}{
Definition at line 81 of file GUI.ino.}\par
{
\pard\plain \s41\li360\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid    82 \{\par
   83   display.setRotation(1);\par
   84   display.fillScreen(GxEPD_WHITE);\par
   85   display.setTextColor(GxEPD_BLACK);\par
   86   display.setFont(font);\par
   87   display.setCursor(0, 14);\par
   88   display.println({\cf22 "-------- Room "} + room + {\cf22 " --------"});\par
   89   {\cf19 for} ({\cf18 int} i = 0; i < 5; i++) \{\par
   90     display.setCursor(0, 35 + (16 * i));\par
   91     display.println(lecturerNames[i]);\par
   92     display.setCursor(175, 35 + (16 * i));\par
   93     {\cf19 if} (lecturerNames[i] != {\cf22 ""}) display.println({\cf22 "-"});\par
   94     display.setCursor(190, 35 + (16 * i));\par
   95     display.println(lecturerStatus[i]);\par
   96   \}\par
   97   display.setCursor(270, 122);\par
   98   {\cf19 if} (sleeping) display.println({\cf22 "Zz"});\par
   99 \par
  100   {\cf20 //Draw battery icon and percentage}\par
  101   {\cf18 float} VBAT = ((200.0f / 100.0f) * 3.30f * {\cf18 float}(analogRead(BATTMONPIN)) / 4095.0f) + 0.2f; {\cf20 // LiPo battery}\par
  102   {\cf18 int} vbatt = (float)((100.0f / 4.2f) * VBAT);\par
  103   Serial.print({\cf22 "[INFO] Battery Voltage = "}); Serial.print(VBAT, 2); Serial.println({\cf22 " V"});\par
  104   display.drawRect(1, 113, 30, 13, GxEPD_BLACK);\par
  105   display.drawRect(2, 114, 28, 11, GxEPD_BLACK);\par
  106   display.fillRect(31, 116, 3, 7, GxEPD_BLACK);\par
  107   display.fillRect(1, 113, ({\cf18 int})(vbatt / 3.33), 13, GxEPD_BLACK); {\cf20 //fill to battery %}\par
  108   display.setCursor(35, 123);\par
  109   display.println((String)vbatt + {\cf22 "%"});\par
  110 \par
  111   display.update(); {\cf20 //Send buffer to display}\par
  112 \}\par
}
}
{\pard\widctlpar\brdrb\brdrs\brdrw5\brsp20 \adjustright \par}
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Variable Documentation\par
\pard\plain 
{\xe \v font\:GUI.ino}
{\xe \v GUI.ino\:font}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
const GFXfont* font = &FreeMonoBold9pt7b}}
\par
{\bkmkstart AAAAAAAABB}
{\bkmkend AAAAAAAABB}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
\par
{
{\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
Define the font used for the GUI. }}\par
{
Definition at line 8 of file GUI.ino.}\par
}
{\xe \v logbuffer\:GUI.ino}
{\xe \v GUI.ino\:logbuffer}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
String logbuffer[8] = \{ "", "", "", "", "", "", "", "" \}}}
\par
{\bkmkstart AAAAAAAABC}
{\bkmkend AAAAAAAABC}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
\par
{
{\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
Buffer of last 8 log messages to show on screen. FIFO queue. }}\par
{
Definition at line 7 of file GUI.ino.}\par
}
\par \pard\plain 

\pard\plain \sect\sbknone
{\pard\widctlpar\brdrb\brdremboss\brdrw15\brsp20 \adjustright \par}
\s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
\pard\plain \s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
Hardware.ino File Reference\par \pard\plain 
{\tc\tcl2 \v Hardware.ino}
{\xe \v Hardware.ino}
{\bkmkstart AAAAAAAABD}
{\bkmkend AAAAAAAABD}
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Functions\par
\pard\plain 

{
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
void {\b initGPIO} ()\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
void {\b setVCOM} (unsigned char d)\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
void {\b tcaselect} (uint8_t i)\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
int {\b tcaget} ()\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
void {\b detectVCNLs} ()\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
void {\b calibrateVCNLs} ()\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
void {\b checkButtons} ()\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
void {\b manageSleep} ()\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
void {\b entersleep} ()\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
void {\b wakeup_reason} ()\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
int {\b bootmode} ()\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
void {\b scanVCNLs} ()\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
void {\b setupVCNLinterrupt} ()\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
uint16_t {\b getBackgroundProximity} ()\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
int {\b interruptSource} ()\par
}
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Variables\par
\pard\plain 

{
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
long {\b average} [] = \{0, 0, 0, 0, 0, 0, 0, 0\}\par
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid {\i {\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
Array of average reading of all sensors. }{
}\par
}\par}
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
long {\b threshold} [] = \{0, 0, 0, 0, 0, 0, 0, 0\}\par
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid {\i {\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
Array of threshold limits to trigger each sensor. }{
}\par
}\par}
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
long {\b reading} [] = \{0, 0, 0, 0, 0, 0, 0, 0\}\par
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid {\i {\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
Current reading of each sensor. }{
}\par
}\par}
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
Adafruit_VCNL4010 {\b vcnl}\par
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid {\i {\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
Object for the VNCL sensor. }{
}\par
}\par}
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
unsigned long {\b lastPressed} = 0\par
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid {\i {\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
Time in ms since boot that a sensor was last pressed. Used to determine when to enter sleep mode after inactivity. }{
}\par
}\par}
}
{\pard\widctlpar\brdrb\brdrs\brdrw5\brsp20 \adjustright \par}
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Detailed Description\par
\pard\plain 
{
\pard\plain \s17\sa60\sb30\widctlpar\qj \fs22\cgrid {\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
Handles I2C multiplexer, connection to VCNL IR proximity sensors, proximity sensor related functions, initialisation of GPIO, scanning of buttons. \par
}}
{\pard\widctlpar\brdrb\brdrs\brdrw5\brsp20 \adjustright \par}
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Function Documentation\par
\pard\plain 
{\xe \v bootmode\:Hardware.ino}
{\xe \v Hardware.ino\:bootmode}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
int bootmode ()}}
\par
{\bkmkstart AAAAAAAABE}
{\bkmkend AAAAAAAABE}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
{\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
Determine type of boot mode. 1 = sensor interrupt, 2 = button interrupt, 3 = periodic timer wakeup, 6 = normal startup. \par
}{
Definition at line 168 of file Hardware.ino.}\par
{
\pard\plain \s41\li360\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid   168                \{\par
  169   esp_sleep_wakeup_cause_t wakeup_reason;\par
  170   wakeup_reason = esp_sleep_get_wakeup_cause();\par
  171   {\cf19 if} (wakeup_reason > 5 or wakeup_reason < 1)\{\par
  172     {\cf19 return} 6;\par
  173   \} {\cf19 else} \{\par
  174     {\cf19 return} wakeup_reason;\par
  175   \}\par
  176 \}\par
}
}
{\xe \v calibrateVCNLs\:Hardware.ino}
{\xe \v Hardware.ino\:calibrateVCNLs}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
void calibrateVCNLs ()}}
\par
{\bkmkstart AAAAAAAABF}
{\bkmkend AAAAAAAABF}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
{\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
Calibrate VCNL threshold by averaging N_THRES_SAMPLES samples and multiplying by thres \par
}{
Definition at line 94 of file Hardware.ino.}\par
{
\pard\plain \s41\li360\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid    94                       \{\par
   95   {\cf19 for} ({\cf18 int} bus = 0; bus < doorbells; bus++) \{\par
   96     tcaselect(bus);\par
   97     Serial.print({\cf22 "[INFO] Calibrating proximity threshold on bus "} + (String)bus + {\cf22 " "});\par
   98     vcnl.setLEDcurrent(LEDCURR); {\cf20 //Set IR LED on to take measurement}\par
   99     delay(10); {\cf20 //small delay to allow IR LED to stabilise}\par
  100     {\cf19 for} ({\cf18 int} i = 0; i <= N_THRES_SAMPLES; i++) \{\par
  101       {\cf18 int} tmp = vcnl.readProximity();\par
  102       average[bus] = average[bus] + tmp;\par
  103       Serial.print((String)((100 / N_THRES_SAMPLES)*i) + {\cf22 "% "});\par
  104       delay(100);\par
  105     \}\par
  106     vcnl.setLEDcurrent(0); {\cf20 //Set IR LED off}\par
  107     average[bus] = average[bus] / N_THRES_SAMPLES;\par
  108     threshold[bus] = average[bus] * thres;\par
  109     Serial.println((String){\cf22 "Average level was: "} + average[bus] + {\cf22 " Threshold set to: "} + threshold[bus]);\par
  110   \}\par
  111   Serial.println({\cf22 "[INFO] Calibration done"});\par
  112 \}\par
}
}
{\xe \v checkButtons\:Hardware.ino}
{\xe \v Hardware.ino\:checkButtons}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
void checkButtons ()}}
\par
{\bkmkstart AAAAAAAABG}
{\bkmkend AAAAAAAABG}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
{\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
Check if hardware buttons are pressed and run actions. \par
}{
Definition at line 115 of file Hardware.ino.}\par
{
\pard\plain \s41\li360\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid   115                     \{\par
  116   {\cf19 if} (digitalRead(BTNAPIN)) \{\par
  117     lastPressed = millis(); {\cf20 //record the button was pressed for sleep mode}\par
  118     Serial.println({\cf22 "[INFO] Button A Pressed"});\par
  119     showInfo();\par
  120     {\cf19 while} (digitalRead(BTNAPIN)) \{\}\par
  121   \}\par
  122   {\cf19 if} (digitalRead(BTNBPIN)) \{\par
  123     lastPressed = millis(); {\cf20 //record the button was pressed for sleep mode}\par
  124     Serial.println({\cf22 "[INFO] Button B Pressed"});\par
  125     {\cf19 while} (digitalRead(BTNBPIN)) \{\}\par
  126   \}\par
  127 \}\par
}
}
{\xe \v detectVCNLs\:Hardware.ino}
{\xe \v Hardware.ino\:detectVCNLs}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
void detectVCNLs ()}}
\par
{\bkmkstart AAAAAAAABH}
{\bkmkend AAAAAAAABH}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
{\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
Attempt to initialise connected VCNL's one by one \par
}{
Definition at line 64 of file Hardware.ino.}\par
{
\pard\plain \s41\li360\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid    64                    \{\par
   65   Serial.println({\cf22 "[INFO] Autodetecting sensors...."});\par
   66   {\cf20 //addToLog("Autodetecting sensors....");}\par
   67   {\cf19 for} ({\cf18 int} bus = 0; bus <= 7; bus++) \{\par
   68     tcaselect(bus);\par
   69     {\cf18 int} trynum = 1;\par
   70     {\cf19 while} (! vcnl.begin() && trynum < TRIES) \{\par
   71       {\cf19 if} (DEBUG_READINGS == 1) Serial.println((String){\cf22 "[DEBUG] Try "} + trynum);\par
   72       trynum++;\par
   73       delay(100);\par
   74     \}\par
   75     {\cf19 if} (trynum < TRIES) \{\par
   76       {\cf20 //found}\par
   77       Serial.println((String){\cf22 "[INFO] Found VCNL40xx on bus "} + bus);\par
   78       doorbells++;\par
   79     \}\par
   80     {\cf19 else} \{\par
   81       {\cf20 //not found}\par
   82       Serial.println((String){\cf22 "[INFO] No VCNL40xx on bus "} + (String)bus + {\cf22 " terminating autodetection."});\par
   83       {\cf19 break};\par
   84     \}\par
   85   \}\par
   86   Serial.println({\cf22 "[INFO] Number of doorbells found: "} + (String)doorbells);\par
   87   {\cf20 //addToLog((String)doorbells + " sensors found.");}\par
   88   {\cf19 if} (doorbells == 0) \{\par
   89     errorMsg({\cf22 "Hardware error.\\nNo VCNL sesnors found.\\nContact support."});\par
   90   \}\par
   91 \}\par
}
}
{\xe \v entersleep\:Hardware.ino}
{\xe \v Hardware.ino\:entersleep}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
void entersleep ()}}
\par
{\bkmkstart AAAAAAAABI}
{\bkmkend AAAAAAAABI}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
{\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
Set up interrupts to wake device, then go to deep sleep for power saving. \par
}{
Definition at line 143 of file Hardware.ino.}\par
{
\pard\plain \s41\li360\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid   143                   \{\par
  144   Serial.println({\cf22 "[INFO] Entering sleep mode"});\par
  145   esp_sleep_enable_ext0_wakeup(GPIO_NUM_32, 0); {\cf20 //interrupt on VCNL sum}\par
  146   esp_sleep_enable_ext1_wakeup(INTERRUPTPINMASK, ESP_EXT1_WAKEUP_ANY_HIGH); {\cf20 //interrupt on A/B buttons}\par
  147   esp_sleep_enable_timer_wakeup(1800 * 1000000); {\cf20 //interrupt every hour to update battery etc}\par
  148   delay(500); {\cf20 //delay to finish setup before CPU halted}\par
  149   esp_deep_sleep_start();\par
  150 \}\par
}
}
{\xe \v getBackgroundProximity\:Hardware.ino}
{\xe \v Hardware.ino\:getBackgroundProximity}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
uint16_t getBackgroundProximity ()}}
\par
{\bkmkstart AAAAAAAABJ}
{\bkmkend AAAAAAAABJ}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
{\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
Take a proximity reading without disturbing the interrupt setup. \par
}{
Definition at line 235 of file Hardware.ino.}\par
{
\pard\plain \s41\li360\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid   235                                   \{\par
  236   vcnl.setLEDcurrent(LEDCURR); {\cf20 //Set IR LED on to take measurement}\par
  237   delay(10); {\cf20 //small delay to allow IR LED to stabilise}\par
  238   vcnl.write8(0x80, 0x03); {\cf20 //run continuous measurements}\par
  239   uint16_t p = vcnl.read8(0x87);\par
  240   p = p << 8;\par
  241   p = p + vcnl.read8(0x88);\par
  242   {\cf19 return} p;\par
  243 \}\par
}
}
{\xe \v initGPIO\:Hardware.ino}
{\xe \v Hardware.ino\:initGPIO}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
void initGPIO ()}}
\par
{\bkmkstart AAAAAAAABK}
{\bkmkend AAAAAAAABK}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
{\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
Initialise the GPIO pins. This should be run AFTER initialising the display so the MISO pin can be detached from the pin matrix and reused. \par
}{
Definition at line 17 of file Hardware.ino.}\par
{
\pard\plain \s41\li360\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid    17                 \{\par
   18   pinMode(BTNAPIN, INPUT);\par
   19   pinMode(BTNBPIN, INPUT);\par
   20   pinMode(INTERRUPTPIN, INPUT);\par
   21   pinMode(BATTMONPIN, INPUT);\par
   22 \par
   23   pinMatrixInDetach(VSPIQ_OUT_IDX, {\cf17 false}, {\cf17 false}); {\cf20 //detatch pin 19 from the VSPI MISO.}\par
   24   pinMode(LEDAVAILPIN, OUTPUT);\par
   25   pinMode(LEDBUSYPIN, OUTPUT);\par
   26   pinMode(LEDOKPIN, OUTPUT);\par
   27   pinMode(LEDERRPIN, OUTPUT);\par
   28 \}\par
}
}
{\xe \v interruptSource\:Hardware.ino}
{\xe \v Hardware.ino\:interruptSource}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
int interruptSource ()}}
\par
{\bkmkstart AAAAAAAABL}
{\bkmkend AAAAAAAABL}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
{\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
Determine which sensor caused a hardware interrupt. \par
}{
Definition at line 246 of file Hardware.ino.}\par
{
\pard\plain \s41\li360\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid   246                       \{\par
  247   {\cf19 for} ({\cf18 int} bus = 0; bus < doorbells; bus++) \{\par
  248     tcaselect(bus);\par
  249     {\cf20 //Serial.print((String)"Device " + bus + " has an interrupt register with contents "); Serial.println(vcnl.read8(0x8E),HEX);}\par
  250     {\cf19 if} (vcnl.read8(0x8E) & 0x01) \{ {\cf20 //check interrupt register on VCNL}\par
  251       {\cf19 return} bus;\par
  252     \}\par
  253   \}\par
  254   {\cf19 return} 0;\par
  255 \}\par
}
}
{\xe \v manageSleep\:Hardware.ino}
{\xe \v Hardware.ino\:manageSleep}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
void manageSleep ()}}
\par
{\bkmkstart AAAAAAAABM}
{\bkmkend AAAAAAAABM}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
{\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
Determine if device should enter deep sleep for power saving. \par
}{
Definition at line 130 of file Hardware.ino.}\par
{
\pard\plain \s41\li360\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid   130                    \{\par
  131   {\cf19 if} (powerSave) \{\par
  132     {\cf19 if} (millis() - lastPressed > sleepDelay * 60000) \{\par
  133       {\cf20 //go to sleep if no activity for x mins}\par
  134       setupVCNLinterrupt(); {\cf20 //set up the VCNLs for interrupt}\par
  135       sleeping = {\cf17 true}; {\cf20 //set the sleeping flag}\par
  136       writeNames(); {\cf20 //show the sleeping flag on screen}\par
  137       entersleep(); {\cf20 //go to sleep}\par
  138     \}\par
  139   \}\par
  140 \}\par
}
}
{\xe \v scanVCNLs\:Hardware.ino}
{\xe \v Hardware.ino\:scanVCNLs}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
void scanVCNLs ()}}
\par
{\bkmkstart AAAAAAAABN}
{\bkmkend AAAAAAAABN}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
{\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
Take reading from each sensor. Notify lecturer if above threshold. \par
}{
Definition at line 179 of file Hardware.ino.}\par
{
\pard\plain \s41\li360\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid   179                  \{\par
  180   {\cf19 if} (settingMode) {\cf19 return};\par
  181   {\cf19 for} ({\cf18 int} bus = 0; bus < doorbells; bus++) \{\par
  182     tcaselect(bus);\par
  183     vcnl.setLEDcurrent(LEDCURR); {\cf20 //Set IR LED on to take measurement}\par
  184     delay(10); {\cf20 //small delay to allow IR LED to stabilise}\par
  185     reading[bus] = vcnl.readProximity();\par
  186     {\cf19 if} (reading[bus] > threshold[bus]) \{\par
  187       Serial.println((String){\cf22 "[INFO] Doorbell pressed on bus "} + bus + {\cf22 " reading:"} + reading[bus]);\par
  188       ring(bus);\par
  189       {\cf19 while} (reading[bus] > threshold[bus])\par
  190       \{\par
  191         reading[bus] = vcnl.readProximity();\par
  192         delay(SCAN_INTERVAL);\par
  193       \}\par
  194     \}\par
  195     {\cf20 //Set LED off to save power}\par
  196     vcnl.setLEDcurrent(0);\par
  197   \}\par
  198   {\cf19 if} (DEBUG_READINGS == 1) \{\par
  199     Serial.print({\cf22 "[DEBUG] Current readings:,"});\par
  200     {\cf19 for} ({\cf18 int} i = 0; i <= 7; i++) \{\par
  201       {\cf18 char} buf[50];\par
  202       sprintf(buf, {\cf22 "%05d,"}, reading[i]);\par
  203       Serial.print(buf);\par
  204     \}\par
  205     Serial.print({\cf22 "[DEBUG] Thresholds:      ,"});\par
  206     {\cf19 for} ({\cf18 int} i = 0; i <= 7; i++) \{\par
  207       {\cf18 char} buf[50];\par
  208       sprintf(buf, {\cf22 "%05d,"}, threshold[i]);\par
  209       Serial.print(buf);\par
  210     \}\par
  211   \}\par
  212 \}\par
}
}
{\xe \v setupVCNLinterrupt\:Hardware.ino}
{\xe \v Hardware.ino\:setupVCNLinterrupt}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
void setupVCNLinterrupt ()}}
\par
{\bkmkstart AAAAAAAABO}
{\bkmkend AAAAAAAABO}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
{\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
Set up interrupt on each device when threshold exceeded. (allows detection of touch interaction when CPU asleep). \par
}{
Definition at line 215 of file Hardware.ino.}\par
{
\pard\plain \s41\li360\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid   215                           \{\par
  216   {\cf20 //once the interrupt is set up, the proximity must only be read using background measurement}\par
  217   {\cf19 for} ({\cf18 int} bus = 0; bus < doorbells; bus++) \{\par
  218     tcaselect(bus);\par
  219     Serial.println({\cf22 "[INFO] Setting interrupt on bus "} + (String)bus + {\cf22 " "});\par
  220     vcnl.setLEDcurrent(LEDCURR); {\cf20 //Set IR LED on to take measurement}\par
  221     delay(10); {\cf20 //small delay to allow IR LED to stabilise}\par
  222     vcnl.write8(0x89, 0x02); {\cf20 //set up interrupt type}\par
  223     {\cf20 //set low thres to 0}\par
  224     vcnl.write8(0x8A, 0x00);\par
  225     vcnl.write8(0x8B, 0x00);\par
  226     {\cf20 //set high thres to value from array}\par
  227     vcnl.write8(0x8C, highByte(threshold[bus]));\par
  228     vcnl.write8(0x8D, lowByte(threshold[bus]));\par
  229     {\cf20 //run continuous measurements}\par
  230     vcnl.write8(0x80, 0x03);\par
  231   \}\par
  232 \}\par
}
}
{\xe \v setVCOM\:Hardware.ino}
{\xe \v Hardware.ino\:setVCOM}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
void setVCOM (unsigned char  {\i d})}}
\par
{\bkmkstart AAAAAAAABP}
{\bkmkend AAAAAAAABP}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
{\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
Set the VCOM. This isn't normally needed unless the ePaper is particularly bad. \par
}{
Definition at line 31 of file Hardware.ino.}\par
{
\pard\plain \s41\li360\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid    31                               \{\par
   32   digitalWrite(4, LOW);\par
   33   digitalWrite(15, LOW);\par
   34   SPI.transfer(0x2C); {\cf20 //Write VCOM register}\par
   35   digitalWrite(15, HIGH);\par
   36   digitalWrite(4, HIGH);\par
   37   digitalWrite(15, LOW);\par
   38   SPI.transfer(d);\par
   39   digitalWrite(15, HIGH);\par
   40 \}\par
}
}
{\xe \v tcaget\:Hardware.ino}
{\xe \v Hardware.ino\:tcaget}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
int tcaget ()}}
\par
{\bkmkstart AAAAAAAABQ}
{\bkmkend AAAAAAAABQ}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
{\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
Check the current i2c sub-bus for a specific sensor. Output 0...7 \par
}{
Definition at line 54 of file Hardware.ino.}\par
{
\pard\plain \s41\li360\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid    54              \{ \par
   55   Wire.requestFrom(TCAADDR, 1);\par
   56   {\cf18 byte} c = Wire.read();\par
   57   {\cf19 for} ({\cf18 int} i = 0; i <= 7; i++) \{\par
   58     {\cf19 if} (c == 0x01) {\cf19 return} i;\par
   59     c = c >> 1;\par
   60   \}\par
   61 \}\par
}
}
{\xe \v tcaselect\:Hardware.ino}
{\xe \v Hardware.ino\:tcaselect}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
void tcaselect (uint8_t  {\i i})}}
\par
{\bkmkstart AAAAAAAABR}
{\bkmkend AAAAAAAABR}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
{\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
Selects which i2c sub-bus on the mux for a specific sensor to connect to and checks it, retrying if it's not correct. (input 0...7) \par
}{
Definition at line 43 of file Hardware.ino.}\par
{
\pard\plain \s41\li360\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid    43                           \{ \par
   44   {\cf19 if} (i > 7) {\cf19 return};\par
   45   {\cf19 do} \{\par
   46     {\cf19 if} (DEBUG_READINGS == 1) Serial.println((String){\cf22 "[DEBUG] Selecting bus "} + i);\par
   47     Wire.beginTransmission(TCAADDR);\par
   48     Wire.write(1 << i);\par
   49     Wire.endTransmission();\par
   50   \} {\cf19 while} (!(tcaget() == i));\par
   51 \}\par
}
}
{\xe \v wakeup_reason\:Hardware.ino}
{\xe \v Hardware.ino\:wakeup_reason}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
void wakeup_reason ()}}
\par
{\bkmkstart AAAAAAAABS}
{\bkmkend AAAAAAAABS}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
{\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
Print the reason for wakeup to the serial port. \par
}{
Definition at line 153 of file Hardware.ino.}\par
{
\pard\plain \s41\li360\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid   153                      \{\par
  154   esp_sleep_wakeup_cause_t wakeup_reason;\par
  155   wakeup_reason = esp_sleep_get_wakeup_cause();\par
  156   {\cf19 switch} (wakeup_reason)\par
  157   \{\par
  158     {\cf19 case} 1  : Serial.println({\cf22 "[INFO] Wakeup caused by external signal using RTC_IO"}); {\cf19 break}; {\cf20 //EXT0 - VCNL}\par
  159     {\cf19 case} 2  : Serial.println({\cf22 "[INFO] Wakeup caused by external signal using RTC_CNTL"}); {\cf19 break}; {\cf20 //EXT1 - A/B}\par
  160     {\cf19 case} 3  : Serial.println({\cf22 "[INFO] Wakeup caused by timer"}); {\cf19 break};\par
  161     {\cf19 case} 4  : Serial.println({\cf22 "[INFO] Wakeup caused by touchpad"}); {\cf19 break};\par
  162     {\cf19 case} 5  : Serial.println({\cf22 "[INFO] Wakeup caused by ULP program"}); {\cf19 break};\par
  163     default : Serial.println({\cf22 "[INFO] Wakeup was not caused by deep sleep"}); {\cf19 break};\par
  164   \}\par
  165 \}\par
}
}
{\pard\widctlpar\brdrb\brdrs\brdrw5\brsp20 \adjustright \par}
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Variable Documentation\par
\pard\plain 
{\xe \v average\:Hardware.ino}
{\xe \v Hardware.ino\:average}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
long average[] = \{0, 0, 0, 0, 0, 0, 0, 0\}}}
\par
{\bkmkstart AAAAAAAABT}
{\bkmkend AAAAAAAABT}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
\par
{
{\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
Array of average reading of all sensors. }}\par
{
Definition at line 7 of file Hardware.ino.}\par
}
{\xe \v lastPressed\:Hardware.ino}
{\xe \v Hardware.ino\:lastPressed}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
unsigned long lastPressed = 0}}
\par
{\bkmkstart AAAAAAAABU}
{\bkmkend AAAAAAAABU}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
\par
{
{\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
Time in ms since boot that a sensor was last pressed. Used to determine when to enter sleep mode after inactivity. }}\par
{
Definition at line 14 of file Hardware.ino.}\par
}
{\xe \v reading\:Hardware.ino}
{\xe \v Hardware.ino\:reading}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
long reading[] = \{0, 0, 0, 0, 0, 0, 0, 0\}}}
\par
{\bkmkstart AAAAAAAABV}
{\bkmkend AAAAAAAABV}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
\par
{
{\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
Current reading of each sensor. }}\par
{
Definition at line 9 of file Hardware.ino.}\par
}
{\xe \v threshold\:Hardware.ino}
{\xe \v Hardware.ino\:threshold}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
long threshold[] = \{0, 0, 0, 0, 0, 0, 0, 0\}}}
\par
{\bkmkstart AAAAAAAABW}
{\bkmkend AAAAAAAABW}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
\par
{
{\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
Array of threshold limits to trigger each sensor. }}\par
{
Definition at line 8 of file Hardware.ino.}\par
}
{\xe \v vcnl\:Hardware.ino}
{\xe \v Hardware.ino\:vcnl}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
Adafruit_VCNL4010 vcnl}}
\par
{\bkmkstart AAAAAAAABX}
{\bkmkend AAAAAAAABX}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
\par
{
{\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
Object for the VNCL sensor. }}\par
{
Definition at line 11 of file Hardware.ino.}\par
}
\par \pard\plain 

\pard\plain \sect\sbknone
{\pard\widctlpar\brdrb\brdremboss\brdrw15\brsp20 \adjustright \par}
\s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
\pard\plain \s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
Settings.h File Reference\par \pard\plain 
{\tc\tcl2 \v Settings.h}
{\xe \v Settings.h}
{\bkmkstart AAAAAAAABY}
{\bkmkend AAAAAAAABY}
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Variables\par
\pard\plain 

{
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
String {\b ssid} = ""\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
String {\b wifipsk} = ""\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
String {\b EAP_IDENTITY} = ""\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
String {\b EAP_PASSWORD} = ""\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
String {\b www_username} = "admin"\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
String {\b www_password} = "esp32"\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
String {\b room} = "T815"\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
String {\b lecturerNames} [5] = \{ "Chris Stubbs", "Oswaldo Cadenas", "Fang Duan", "Jeremy Ball", ""\}\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
String {\b lecturerIFTTkeys} [5] = \{ "cWn7UxwOXLX-pqSYsF82Ge", "REMOVEcMalAefCTKzVtoXHlMz9Wk", "", "", ""\}\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
String {\b lecturerStatus} [5] = \{ "Available", "Away", "Busy", "Busy", ""\}\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
float {\b thres} = 2\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
bool {\b busyNotif} = false\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
bool {\b powerSave} = false\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
int {\b sleepDelay} = 1\par
}
{\pard\widctlpar\brdrb\brdrs\brdrw5\brsp20 \adjustright \par}
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Detailed Description\par
\pard\plain 
{
\pard\plain \s17\sa60\sb30\widctlpar\qj \fs22\cgrid {\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
Contains user settings and presets that can be changed for build \par
}}
{\pard\widctlpar\brdrb\brdrs\brdrw5\brsp20 \adjustright \par}
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Variable Documentation\par
\pard\plain 
{\xe \v busyNotif\:Settings.h}
{\xe \v Settings.h\:busyNotif}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
bool busyNotif = false}}
\par
{\bkmkstart AAAAAAAABZ}
{\bkmkend AAAAAAAABZ}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
\par
{
Definition at line 20 of file Settings.h.}\par
}
{\xe \v EAP_IDENTITY\:Settings.h}
{\xe \v Settings.h\:EAP_IDENTITY}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
String EAP_IDENTITY = ""}}
\par
{\bkmkstart AAAAAAAACA}
{\bkmkend AAAAAAAACA}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
\par
{
Definition at line 9 of file Settings.h.}\par
}
{\xe \v EAP_PASSWORD\:Settings.h}
{\xe \v Settings.h\:EAP_PASSWORD}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
String EAP_PASSWORD = ""}}
\par
{\bkmkstart AAAAAAAACB}
{\bkmkend AAAAAAAACB}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
\par
{
Definition at line 10 of file Settings.h.}\par
}
{\xe \v lecturerIFTTkeys\:Settings.h}
{\xe \v Settings.h\:lecturerIFTTkeys}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
String lecturerIFTTkeys[5] = \{ "cWn7UxwOXLX-pqSYsF82Ge", "REMOVEcMalAefCTKzVtoXHlMz9Wk", "", "", ""\}}}
\par
{\bkmkstart AAAAAAAACC}
{\bkmkend AAAAAAAACC}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
\par
{
Definition at line 17 of file Settings.h.}\par
}
{\xe \v lecturerNames\:Settings.h}
{\xe \v Settings.h\:lecturerNames}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
String lecturerNames[5] = \{ "Chris Stubbs", "Oswaldo Cadenas", "Fang Duan", "Jeremy Ball", ""\}}}
\par
{\bkmkstart AAAAAAAACD}
{\bkmkend AAAAAAAACD}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
\par
{
Definition at line 16 of file Settings.h.}\par
}
{\xe \v lecturerStatus\:Settings.h}
{\xe \v Settings.h\:lecturerStatus}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
String lecturerStatus[5] = \{ "Available", "Away", "Busy", "Busy", ""\}}}
\par
{\bkmkstart AAAAAAAACE}
{\bkmkend AAAAAAAACE}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
\par
{
Definition at line 18 of file Settings.h.}\par
}
{\xe \v powerSave\:Settings.h}
{\xe \v Settings.h\:powerSave}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
bool powerSave = false}}
\par
{\bkmkstart AAAAAAAACF}
{\bkmkend AAAAAAAACF}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
\par
{
Definition at line 21 of file Settings.h.}\par
}
{\xe \v room\:Settings.h}
{\xe \v Settings.h\:room}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
String room = "T815"}}
\par
{\bkmkstart AAAAAAAACG}
{\bkmkend AAAAAAAACG}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
\par
{
Definition at line 15 of file Settings.h.}\par
}
{\xe \v sleepDelay\:Settings.h}
{\xe \v Settings.h\:sleepDelay}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
int sleepDelay = 1}}
\par
{\bkmkstart AAAAAAAACH}
{\bkmkend AAAAAAAACH}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
\par
{
Definition at line 22 of file Settings.h.}\par
}
{\xe \v ssid\:Settings.h}
{\xe \v Settings.h\:ssid}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
String ssid = ""}}
\par
{\bkmkstart AAAAAAAACI}
{\bkmkend AAAAAAAACI}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
\par
{
Definition at line 7 of file Settings.h.}\par
}
{\xe \v thres\:Settings.h}
{\xe \v Settings.h\:thres}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
float thres = 2}}
\par
{\bkmkstart AAAAAAAACJ}
{\bkmkend AAAAAAAACJ}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
\par
{
Definition at line 19 of file Settings.h.}\par
}
{\xe \v wifipsk\:Settings.h}
{\xe \v Settings.h\:wifipsk}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
String wifipsk = ""}}
\par
{\bkmkstart AAAAAAAACK}
{\bkmkend AAAAAAAACK}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
\par
{
Definition at line 8 of file Settings.h.}\par
}
{\xe \v www_password\:Settings.h}
{\xe \v Settings.h\:www_password}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
String www_password = "esp32"}}
\par
{\bkmkstart AAAAAAAACL}
{\bkmkend AAAAAAAACL}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
\par
{
Definition at line 12 of file Settings.h.}\par
}
{\xe \v www_username\:Settings.h}
{\xe \v Settings.h\:www_username}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
String www_username = "admin"}}
\par
{\bkmkstart AAAAAAAACM}
{\bkmkend AAAAAAAACM}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
\par
{
Definition at line 11 of file Settings.h.}\par
}
\par \pard\plain 

\pard\plain \sect\sbknone
{\pard\widctlpar\brdrb\brdremboss\brdrw15\brsp20 \adjustright \par}
\s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
\pard\plain \s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
Settings_template.h File Reference\par \pard\plain 
{\tc\tcl2 \v Settings_template.h}
{\xe \v Settings_template.h}
{\bkmkstart AAAAAAAACN}
{\bkmkend AAAAAAAACN}
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Variables\par
\pard\plain 

{
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
String {\b ssid} = ""\par
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid {\i {\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
WiFi SSID the device will connect to. Set from setup wizard. }{
}\par
}\par}
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
String {\b wifipsk} = ""\par
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid {\i {\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
WiFi pre-shared key (password) the device will connect with. Set from setup wizard. }{
}\par
}\par}
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
String {\b EAP_IDENTITY} = ""\par
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid {\i {\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
WPA2-ENTERPRISE (eduroam) email address. Set from setup wizard. }{
}\par
}\par}
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
String {\b EAP_PASSWORD} = ""\par
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid {\i {\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
WPA2-ENTERPRISE (eduroam) password. Set from setup wizard. }{
}\par
}\par}
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
String {\b www_username} = "admin"\par
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid {\i {\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
Defualt username for web config interface. Set from web config interface. }{
}\par
}\par}
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
String {\b www_password} = "esp32"\par
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid {\i {\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
Defualt password for web config interface. Set from web config interface. }{
}\par
}\par}
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
String {\b room} = "T815"\par
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid {\i {\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
Name of room device is fixed to. Set from web config interface. }{
}\par
}\par}
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
String {\b lecturerNames} [5] = \{ "Name1", "Name2", "Name3", "", ""\}\par
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid {\i {\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
Array of lectureres names. Set from web config interface. }{
}\par
}\par}
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
String {\b lecturerIFTTkeys} [5] = \{ "Key1", "Key2", "Key3", "", ""\}\par
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid {\i {\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
Array of lecturer IFTTT keys. Set from web config interface. }{
}\par
}\par}
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
String {\b lecturerStatus} [5] = \{ "Available", "Away", "Busy", "", ""\}\par
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid {\i {\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
Array of lecturer status. Set from web config interface. }{
}\par
}\par}
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
float {\b thres} = 2\par
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid {\i {\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
Threshold for sensor. }{
}\par
}\par}
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
bool {\b busyNotif} = false\par
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid {\i {\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
Notify lecturer anyway if they are busy? }{
}\par
}\par}
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
bool {\b powerSave} = false\par
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid {\i {\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
Enter power saving mode after inactivity? }{
}\par
}\par}
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
int {\b sleepDelay} = 15\par
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid {\i {\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
Period of inactivity in mins before entering power save mode. }{
}\par
}\par}
}
{\pard\widctlpar\brdrb\brdrs\brdrw5\brsp20 \adjustright \par}
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Detailed Description\par
\pard\plain 
{
\pard\plain \s17\sa60\sb30\widctlpar\qj \fs22\cgrid {\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
Contains user settings and presets that can be changed for build. Rename this file to {\b Settings.h}. \par
}}
{\pard\widctlpar\brdrb\brdrs\brdrw5\brsp20 \adjustright \par}
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Variable Documentation\par
\pard\plain 
{\xe \v busyNotif\:Settings_template.h}
{\xe \v Settings_template.h\:busyNotif}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
bool busyNotif = false}}
\par
{\bkmkstart AAAAAAAACO}
{\bkmkend AAAAAAAACO}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
\par
{
{\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
Notify lecturer anyway if they are busy? }}\par
{
Definition at line 20 of file Settings_template.h.}\par
}
{\xe \v EAP_IDENTITY\:Settings_template.h}
{\xe \v Settings_template.h\:EAP_IDENTITY}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
String EAP_IDENTITY = ""}}
\par
{\bkmkstart AAAAAAAACP}
{\bkmkend AAAAAAAACP}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
\par
{
{\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
WPA2-ENTERPRISE (eduroam) email address. Set from setup wizard. }}\par
{
Definition at line 9 of file Settings_template.h.}\par
}
{\xe \v EAP_PASSWORD\:Settings_template.h}
{\xe \v Settings_template.h\:EAP_PASSWORD}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
String EAP_PASSWORD = ""}}
\par
{\bkmkstart AAAAAAAACQ}
{\bkmkend AAAAAAAACQ}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
\par
{
{\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
WPA2-ENTERPRISE (eduroam) password. Set from setup wizard. }}\par
{
Definition at line 10 of file Settings_template.h.}\par
}
{\xe \v lecturerIFTTkeys\:Settings_template.h}
{\xe \v Settings_template.h\:lecturerIFTTkeys}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
String lecturerIFTTkeys[5] = \{ "Key1", "Key2", "Key3", "", ""\}}}
\par
{\bkmkstart AAAAAAAACR}
{\bkmkend AAAAAAAACR}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
\par
{
{\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
Array of lecturer IFTTT keys. Set from web config interface. }}\par
{
Definition at line 17 of file Settings_template.h.}\par
}
{\xe \v lecturerNames\:Settings_template.h}
{\xe \v Settings_template.h\:lecturerNames}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
String lecturerNames[5] = \{ "Name1", "Name2", "Name3", "", ""\}}}
\par
{\bkmkstart AAAAAAAACS}
{\bkmkend AAAAAAAACS}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
\par
{
{\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
Array of lectureres names. Set from web config interface. }}\par
{
Definition at line 16 of file Settings_template.h.}\par
}
{\xe \v lecturerStatus\:Settings_template.h}
{\xe \v Settings_template.h\:lecturerStatus}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
String lecturerStatus[5] = \{ "Available", "Away", "Busy", "", ""\}}}
\par
{\bkmkstart AAAAAAAACT}
{\bkmkend AAAAAAAACT}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
\par
{
{\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
Array of lecturer status. Set from web config interface. }}\par
{
Definition at line 18 of file Settings_template.h.}\par
}
{\xe \v powerSave\:Settings_template.h}
{\xe \v Settings_template.h\:powerSave}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
bool powerSave = false}}
\par
{\bkmkstart AAAAAAAACU}
{\bkmkend AAAAAAAACU}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
\par
{
{\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
Enter power saving mode after inactivity? }}\par
{
Definition at line 21 of file Settings_template.h.}\par
}
{\xe \v room\:Settings_template.h}
{\xe \v Settings_template.h\:room}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
String room = "T815"}}
\par
{\bkmkstart AAAAAAAACV}
{\bkmkend AAAAAAAACV}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
\par
{
{\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
Name of room device is fixed to. Set from web config interface. }}\par
{
Definition at line 15 of file Settings_template.h.}\par
}
{\xe \v sleepDelay\:Settings_template.h}
{\xe \v Settings_template.h\:sleepDelay}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
int sleepDelay = 15}}
\par
{\bkmkstart AAAAAAAACW}
{\bkmkend AAAAAAAACW}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
\par
{
{\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
Period of inactivity in mins before entering power save mode. }}\par
{
Definition at line 22 of file Settings_template.h.}\par
}
{\xe \v ssid\:Settings_template.h}
{\xe \v Settings_template.h\:ssid}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
String ssid = ""}}
\par
{\bkmkstart AAAAAAAACX}
{\bkmkend AAAAAAAACX}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
\par
{
{\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
WiFi SSID the device will connect to. Set from setup wizard. }}\par
{
Definition at line 7 of file Settings_template.h.}\par
}
{\xe \v thres\:Settings_template.h}
{\xe \v Settings_template.h\:thres}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
float thres = 2}}
\par
{\bkmkstart AAAAAAAACY}
{\bkmkend AAAAAAAACY}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
\par
{
{\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
Threshold for sensor. }}\par
{
Definition at line 19 of file Settings_template.h.}\par
}
{\xe \v wifipsk\:Settings_template.h}
{\xe \v Settings_template.h\:wifipsk}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
String wifipsk = ""}}
\par
{\bkmkstart AAAAAAAACZ}
{\bkmkend AAAAAAAACZ}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
\par
{
{\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
WiFi pre-shared key (password) the device will connect with. Set from setup wizard. }}\par
{
Definition at line 8 of file Settings_template.h.}\par
}
{\xe \v www_password\:Settings_template.h}
{\xe \v Settings_template.h\:www_password}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
String www_password = "esp32"}}
\par
{\bkmkstart AAAAAAAADA}
{\bkmkend AAAAAAAADA}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
\par
{
{\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
Defualt password for web config interface. Set from web config interface. }}\par
{
Definition at line 12 of file Settings_template.h.}\par
}
{\xe \v www_username\:Settings_template.h}
{\xe \v Settings_template.h\:www_username}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
String www_username = "admin"}}
\par
{\bkmkstart AAAAAAAADB}
{\bkmkend AAAAAAAADB}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
\par
{
{\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
Defualt username for web config interface. Set from web config interface. }}\par
{
Definition at line 11 of file Settings_template.h.}\par
}
\par \pard\plain 

\pard\plain \sect\sbknone
{\pard\widctlpar\brdrb\brdremboss\brdrw15\brsp20 \adjustright \par}
\s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
\pard\plain \s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
Web.ino File Reference\par \pard\plain 
{\tc\tcl2 \v Web.ino}
{\xe \v Web.ino}
{\bkmkstart AAAAAAAADC}
{\bkmkend AAAAAAAADC}
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Functions\par
\pard\plain 

{
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
const IPAddress {\b apIP} (192, 168, 1, 1)\par
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid {\i {\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
Fixed IP address of device for setup wizard in AP mode. }{
}\par
}\par}
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
void {\b wifiTasks} ()\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
void {\b ring} (const int bus)\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
boolean {\b connectWiFi} ()\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
boolean {\b checkConnection} ()\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
void {\b startWebServer} ()\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
void {\b setupMode} ()\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
String {\b makePage} (String title, String contents)\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
String {\b urlDecode} (String input)\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
void {\b handleRoot} ()\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
String {\b generateStatusDropdown} (uint8_t n)\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
void {\b saveSettings} ()\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
void {\b handleNotFound} ()\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
void {\b handleReset} ()\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
void {\b handleSetupRoot} ()\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
void {\b handleSettings} ()\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
void {\b handleEduroam} ()\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
void {\b handleSetAP} ()\par
}
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Variables\par
\pard\plain 

{
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
const char * {\b apSSID} = "_SETUP"\par
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid {\i {\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
Name of SSID for setup wizard access point. }{
}\par
}\par}
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
String {\b ssidList}\par
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid {\i {\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
List of all detected SSIDs from scan. }{
}\par
}\par}
}
{\pard\widctlpar\brdrb\brdrs\brdrw5\brsp20 \adjustright \par}
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Detailed Description\par
\pard\plain 
{
\pard\plain \s17\sa60\sb30\widctlpar\qj \fs22\cgrid {\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
Handles WiFi access point, WiFi client, DNS server, webservers for initial setup wizard and configuration, IFTTT integration. Also contains all HTML for webservers \par
}}
{\pard\widctlpar\brdrb\brdrs\brdrw5\brsp20 \adjustright \par}
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Function Documentation\par
\pard\plain 
{\xe \v apIP\:Web.ino}
{\xe \v Web.ino\:apIP}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
const IPAddress apIP (192 , 168 , 1 , 1 )}}
\par
{\bkmkstart AAAAAAAADD}
{\bkmkend AAAAAAAADD}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
\par
{
{\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
Fixed IP address of device for setup wizard in AP mode. }}\par
}
{\xe \v checkConnection\:Web.ino}
{\xe \v Web.ino\:checkConnection}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
boolean checkConnection ()}}
\par
{\bkmkstart AAAAAAAADE}
{\bkmkend AAAAAAAADE}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
{\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
Check WiFi is connected. \par
}{
Definition at line 158 of file Web.ino.}\par
{
\pard\plain \s41\li360\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid   158                           \{\par
  159   {\cf18 int} count = 0;\par
  160   {\cf19 while} ( count < 15 ) \{\par
  161     {\cf19 if} (WiFi.status() == WL_CONNECTED) \{\par
  162       Serial.println({\cf22 "\\n[INFO] Connected!"});\par
  163       settingMode = {\cf17 false};\par
  164       {\cf19 return} ({\cf17 true});\par
  165     \}\par
  166     delay(500);\par
  167     Serial.print({\cf22 "."});\par
  168     count++;\par
  169   \}\par
  170   Serial.println();\par
  171   {\cf19 return} {\cf17 false};\par
  172 \}\par
}
}
{\xe \v connectWiFi\:Web.ino}
{\xe \v Web.ino\:connectWiFi}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
boolean connectWiFi ()}}
\par
{\bkmkstart AAAAAAAADF}
{\bkmkend AAAAAAAADF}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
{\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
Attempt to connect to specified WiFi SSID. After 3 failures, default to setup wizard. \par
}{
Definition at line 103 of file Web.ino.}\par
{
\pard\plain \s41\li360\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid   103                       \{\par
  104   {\cf18 int} connAttempts = 0;\par
  105   {\cf19 while} (connAttempts < 3) \{\par
  106     connAttempts++;\par
  107     {\cf19 if} (EAP_IDENTITY == {\cf22 ""}) \{\par
  108       {\cf20 //if wpa2-psk is configured}\par
  109       Serial.println((String){\cf22 "[INFO] WPA2-PSK mode."});\par
  110       WiFi.begin(ssid.c_str(), rot(wifipsk).c_str());\par
  111     \} {\cf19 else} \{\par
  112       {\cf20 //if eduroam  is configured}\par
  113       Serial.println((String){\cf22 "[INFO] WPA2-Enterprise mode."});\par
  114       WiFi.disconnect({\cf17 true});\par
  115       WiFi.mode(WIFI_STA);\par
  116       {\cf17 const} {\cf18 unsigned} {\cf18 char}* EAP_IDENTITY_A = reinterpret_cast<const unsigned char *>( rot(EAP_IDENTITY).c_str() ); {\cf20 //convert strings to unsigned char for enterprise functions}\par
  117       {\cf17 const} {\cf18 unsigned} {\cf18 char}* EAP_PASSWORD_A = reinterpret_cast<const unsigned char *>( rot(EAP_PASSWORD).c_str() );\par
  118       esp_wifi_sta_wpa2_ent_set_username(EAP_IDENTITY_A, strlen(rot(EAP_IDENTITY).c_str())); {\cf20 //set enterprise wifi parameters}\par
  119       esp_wifi_sta_wpa2_ent_set_password(EAP_PASSWORD_A, strlen(rot(EAP_PASSWORD).c_str()));\par
  120       esp_wpa2_config_t config = WPA2_CONFIG_INIT_DEFAULT(); {\cf20 //set config settings to default}\par
  121       esp_wifi_sta_wpa2_ent_enable(&config); {\cf20 //enable enterprise mode}\par
  122       WiFi.begin(ssid.c_str(), rot(wifipsk).c_str()); {\cf20 //connect to AP}\par
  123     \}\par
  124     Serial.print({\cf22 "[INFO] Connecting to "} + ssid + {\cf22 ". Attempt "} + connAttempts);\par
  125     addToLog(ssid + {\cf22 " connecting"});\par
  126     {\cf19 if} (checkConnection()) \{\par
  127       {\cf19 return} {\cf17 true}; {\cf20 //Connected OK.}\par
  128     \} {\cf19 else} \{\par
  129       {\cf20 //Connection failed. Try again.}\par
  130       {\cf19 if} (connAttempts == 3) \{\par
  131         {\cf20 //Display last attempt error}\par
  132         errorMsg({\cf22 "WiFi connection timed out.\\nThis is attempt "} + (String)connAttempts + {\cf22 "/3.\\nAborting connection.\\nEntering setup mode."});\par
  133       \} {\cf19 else} \{\par
  134         {\cf20 //Display retry error}\par
  135         errorMsg({\cf22 "WiFi connection timed out.\\nThis is attempt "} + (String)connAttempts + {\cf22 "/3.\\nTrying again in 10s.\\nPress [A] to retry now.\\nPress [B] to run setup."});\par
  136         {\cf18 unsigned} {\cf18 long} tmr = millis();\par
  137         {\cf19 while} ((millis() - tmr < 10000)) \{\par
  138           {\cf19 if} (digitalRead(BTNAPIN)) \{\par
  139             {\cf20 //User requested retry}\par
  140             {\cf19 if} (connAttempts == 3) connAttempts = 2; {\cf20 //Manually allow one more try if on last try.}\par
  141             {\cf19 break};\par
  142           \}\par
  143           {\cf19 if} (digitalRead(BTNBPIN)) \{\par
  144             {\cf20 //User requested setup mode}\par
  145             settingMode = {\cf17 true};\par
  146             {\cf19 return} {\cf17 false};\par
  147           \}\par
  148         \}\par
  149       \}\par
  150       settingMode = {\cf17 true};\par
  151     \}\par
  152   \}\par
  153   {\cf20 //Failed to connect after 3 attempts.}\par
  154   {\cf19 return} {\cf17 false};\par
  155 \}\par
}
}
{\xe \v generateStatusDropdown\:Web.ino}
{\xe \v Web.ino\:generateStatusDropdown}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
String generateStatusDropdown (uint8_t  {\i n})}}
\par
{\bkmkstart AAAAAAAADG}
{\bkmkend AAAAAAAADG}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
{\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
Generate HTML for dropdown with status options. \par
}{
Definition at line 359 of file Web.ino.}\par
{
\pard\plain \s41\li360\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid   359                                          \{\par
  360   {\cf20 //Generates the HTML string for a status dropdown of the given lecturer number (n).}\par
  361   {\cf18 int} num = n + 1;\par
  362   String tmphtml = {\cf22 ""};\par
  363   tmphtml = {\cf22 "<select name='l"} + (String)num + {\cf22 "status'>"};\par
  364 \par
  365   tmphtml += {\cf22 "<option "};\par
  366   {\cf19 if} (lecturerStatus[n] == {\cf22 "Available"}) tmphtml += {\cf22 "selected "};\par
  367   tmphtml += {\cf22 "value='Available'>Available</option>"};\par
  368 \par
  369   tmphtml += {\cf22 "<option "};\par
  370   {\cf19 if} (lecturerStatus[n] == {\cf22 "Away"}) tmphtml += {\cf22 "selected "};\par
  371   tmphtml += {\cf22 "value='Away'>Away</option>"};\par
  372 \par
  373   tmphtml += {\cf22 "<option "};\par
  374   {\cf19 if} (lecturerStatus[n] == {\cf22 "Busy"}) tmphtml += {\cf22 "selected "};\par
  375   tmphtml += {\cf22 "value='Busy'>Busy</option>"};\par
  376 \par
  377   tmphtml += {\cf22 "<option "};\par
  378   {\cf19 if} (lecturerStatus[n] == {\cf22 ""}) tmphtml += {\cf22 "selected "};\par
  379   tmphtml += {\cf22 "value=''></option>"};\par
  380 \par
  381   {\cf19 return} tmphtml;\par
  382 \}\par
}
}
{\xe \v handleEduroam\:Web.ino}
{\xe \v Web.ino\:handleEduroam}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
void handleEduroam ()}}
\par
{\bkmkstart AAAAAAAADH}
{\bkmkend AAAAAAAADH}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
{\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
Serve menu for WPA2-ENTERPRISE setup. \par
}{
Definition at line 477 of file Web.ino.}\par
{
\pard\plain \s41\li360\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid   477                      \{\par
  478   String s = {\cf22 "<h1>Wi-Fi Settings</h1><p><a href=\\"/\\">Go back</a></p><p>Please enter settings for eduroam (WPA2-Enterprise).</p><p>Password is typically left blank.</p><p>EAP Identity is typically your university email address.</p><p>EAP Password is typically your university password.</p>"};\par
  479   s += {\cf22 "<form method=\\"get\\" action=\\"setap\\">"};\par
  480   s += {\cf22 "<table><tr>"};\par
  481   s += {\cf22 "<td>SSID:</td><td><select name=\\"ssid\\"><option selected value=\\"eduroam\\">eduroam</option>"};\par
  482   s += ssidList;\par
  483   s += {\cf22 "</select></td></tr><td>Password:<?td><td><input name=\\"pass\\" length=64 type=\\"password\\"></td></tr>"};\par
  484   s += {\cf22 "<tr><td>EAP Identity:</td><td><input name=\\"eapidentity\\" length=64></td></tr>"};\par
  485   s += {\cf22 "<tr><td>EAP Password:</td><td><input name=\\"eappass\\" length=64 type=\\"password\\"></td></tr>"};\par
  486   s += {\cf22 "<tr><td><input type=\\"submit\\"></td></tr></table></form>"};\par
  487   webServer.send(200, {\cf22 "text/html"}, makePage({\cf22 "Wi-Fi Settings"}, s));\par
  488 \}\par
}
}
{\xe \v handleNotFound\:Web.ino}
{\xe \v Web.ino\:handleNotFound}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
void handleNotFound ()}}
\par
{\bkmkstart AAAAAAAADI}
{\bkmkend AAAAAAAADI}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
{\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
Serve error page if request is unhandled. \par
}{
Definition at line 422 of file Web.ino.}\par
{
\pard\plain \s41\li360\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid   422                       \{\par
  423   String message = {\cf22 "File Not Found\\n\\n"};\par
  424   message += {\cf22 "URI: "};\par
  425   message += webServer.uri();\par
  426   message += {\cf22 "\\nMethod: "};\par
  427   message += (webServer.method() == HTTP_GET) ? {\cf22 "GET"} : {\cf22 "POST"};\par
  428   message += {\cf22 "\\nArguments: "};\par
  429   message += webServer.args();\par
  430   message += {\cf22 "\\n"};\par
  431 \par
  432   {\cf19 for} (uint8_t i = 0; i < webServer.args(); i++) \{\par
  433     message += {\cf22 " "} + webServer.argName(i) + {\cf22 ": "} + webServer.arg(i) + {\cf22 "\\n"};\par
  434   \}\par
  435   webServer.send(404, {\cf22 "text/plain"}, message);\par
  436 \}\par
}
}
{\xe \v handleReset\:Web.ino}
{\xe \v Web.ino\:handleReset}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
void handleReset ()}}
\par
{\bkmkstart AAAAAAAADJ}
{\bkmkend AAAAAAAADJ}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
{\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
Handle user request to reset settings and reboot device. \par
}{
Definition at line 439 of file Web.ino.}\par
{
\pard\plain \s41\li360\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid   439                    \{\par
  440   {\cf19 if} (!webServer.authenticate(&www_username[0u], &www_password[0u])) \{\par
  441     {\cf19 return} webServer.requestAuthentication();\par
  442     webServer.send(200, {\cf22 "text/plain"}, {\cf22 "Login OK"});\par
  443   \}\par
  444   {\cf19 else} \{\par
  445     SPIFFS.remove({\cf22 "/config.json"});\par
  446     String s = {\cf22 "<h1>Wi-Fi settings reset.</h1><p>The device will now restart.</p>"};\par
  447     s += {\cf22 "<p>Scan for and connect to the Setup access point.</p>"};\par
  448     s += {\cf22 "<p>You may now close this page.</p>"};\par
  449     webServer.send(200, {\cf22 "text/html"}, makePage({\cf22 "Reset Wi-Fi Settings"}, s));\par
  450     delay(1000); {\cf20 //delay to finish serving the page before restart}\par
  451     ESP.restart();\par
  452   \}\par
  453 \}\par
}
}
{\xe \v handleRoot\:Web.ino}
{\xe \v Web.ino\:handleRoot}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
void handleRoot ()}}
\par
{\bkmkstart AAAAAAAADK}
{\bkmkend AAAAAAAADK}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
{\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
Handle requests to the main page of the config interface. Check authentication and serve page with current variables. \par
}{
Definition at line 275 of file Web.ino.}\par
{
\pard\plain \s41\li360\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid   275                   \{\par
  276   {\cf19 if} (!webServer.authenticate(&www_username[0u], &www_password[0u])) \{\par
  277     {\cf19 return} webServer.requestAuthentication();\par
  278     webServer.send(200, {\cf22 "text/plain"}, {\cf22 "Login OK"});\par
  279   \}\par
  280   {\cf19 else} \{\par
  281     {\cf18 int} sec = millis() / 1000;\par
  282     {\cf18 int} min = sec / 60;\par
  283     {\cf18 int} hr = min / 60;\par
  284     {\cf18 char} timestamp [100];\par
  285     snprintf(timestamp, 100, {\cf22 "%02d:%02d:%02d"}, hr, min % 60, sec % 60);\par
  286     {\cf18 float} VBAT = ((200.0f / 100.0f) * 3.30f * {\cf18 float}(analogRead(BATTMONPIN)) / 4095.0f) + 0.2f; {\cf20 // LiPo battery}\par
  287     {\cf18 int} vbatt = (float)((100.0f / 4.2f) * VBAT);\par
  288     String temp = {\cf22 "<html>\\}\par
  289 {\cf22   <head>\\}\par
  290 {\cf22     <title>Lecturer availability door announcer</title>\\}\par
  291 {\cf22     <style>\\}\par
  292 {\cf22       body \{ background-color: #cccccc; font-family: Arial, Helvetica, Sans-Serif; Color: #000088; \}\\}\par
  293 {\cf22     </style>\\}\par
  294 {\cf22   </head>\\}\par
  295 {\cf22   <body>\\}\par
  296 {\cf22     <h1>Lecturer availability door announcer</h1>\\}\par
  297 {\cf22     Final year BEng project by Chris Stubbs (2019)\\}\par
  298 {\cf22     <h2>Status</h2>\\}\par
  299 {\cf22     <p>Uptime: "} + (String)timestamp + {\cf22 "</p>\\}\par
  300 {\cf22     <p>Battery: "} + (String)vbatt + {\cf22 "%, "} + (String)VBAT + {\cf22 "V</p>\\}\par
  301 {\cf22     <p>Free heap (RAM): "} + ESP.getFreeHeap() + {\cf22 " bytes.</p>\\}\par
  302 {\cf22     <h2>Settings</h2>\\}\par
  303 {\cf22 <form action='/savesettings.do' method='post'>\\}\par
  304 {\cf22 Sensor threshold: <input name='threshold' type='text' value='"} + (String)thres + {\cf22 "'>\\}\par
  305 {\cf22 <br /><br />\\}\par
  306 {\cf22 Notify lecturer on ring even if they are busy?: <input name='busyNotif' type='checkbox'"} + ((busyNotif) ? ({\cf22 " checked"}) : ({\cf22 ""})) + {\cf22 ">\\}\par
  307 {\cf22 <br /><br />\\}\par
  308 {\cf22 Enable power saving sleep mode after <input name='sleepDelay' type='text' value='"} + sleepDelay + {\cf22 "'> mins?: <input name='powerSave' type='checkbox'"} + ((powerSave) ? ({\cf22 " checked"}) : ({\cf22 ""})) + {\cf22 ">\\}\par
  309 {\cf22 <br /><br />\\}\par
  310 {\cf22 Room name: <input name='room' type='text' value='"} + room + {\cf22 "'>\\}\par
  311 {\cf22 <br /><br />\\}\par
  312 {\cf22 Admin password: <input name='adminpw' type='text' value='"} + www_password + {\cf22 "'>\\}\par
  313 {\cf22 <br /><br />\\}\par
  314 {\cf22 <table width='500'>\\}\par
  315 {\cf22   <tr>\\}\par
  316 {\cf22     <td>&nbsp;</td>\\}\par
  317 {\cf22     <td>Lecturer 1</td>\\}\par
  318 {\cf22     <td>Lecturer 2</td>\\}\par
  319 {\cf22     <td>Lecturer 3</td>\\}\par
  320 {\cf22     <td>Lecturer 4</td>\\}\par
  321 {\cf22     <td>Lecturer 5</td>\\}\par
  322 {\cf22   </tr>\\}\par
  323 {\cf22   <tr>\\}\par
  324 {\cf22     <td>Name</td>\\}\par
  325 {\cf22     <td><input name='l1name' type='text' value='"} + lecturerNames[0] + {\cf22 "'></td>\\}\par
  326 {\cf22     <td><input name='l2name' type='text' value='"} + lecturerNames[1] + {\cf22 "'></td>\\}\par
  327 {\cf22     <td><input name='l3name' type='text' value='"} + lecturerNames[2] + {\cf22 "'></td>\\}\par
  328 {\cf22     <td><input name='l4name' type='text' value='"} + lecturerNames[3] + {\cf22 "'></td>\\}\par
  329 {\cf22     <td><input name='l5name' type='text' value='"} + lecturerNames[4] + {\cf22 "'></td>\\}\par
  330 {\cf22   </tr>\\}\par
  331 {\cf22   <tr>\\}\par
  332 {\cf22     <td>Key</td>\\}\par
  333 {\cf22     <td><input name='l1key' type='text' value='"} + lecturerIFTTkeys[0] + {\cf22 "'></td>\\}\par
  334 {\cf22     <td><input name='l2key' type='text' value='"} + lecturerIFTTkeys[1] + {\cf22 "'></td>\\}\par
  335 {\cf22     <td><input name='l3key' type='text' value='"} + lecturerIFTTkeys[2] + {\cf22 "'></td>\\}\par
  336 {\cf22     <td><input name='l4key' type='text' value='"} + lecturerIFTTkeys[3] + {\cf22 "'></td>\\}\par
  337 {\cf22     <td><input name='l5key' type='text' value='"} + lecturerIFTTkeys[4] + {\cf22 "'></td>\\}\par
  338 {\cf22   </tr>\\}\par
  339 {\cf22   <tr>\\}\par
  340 {\cf22     <td>Status</td>\\}\par
  341 {\cf22     <td>"} + generateStatusDropdown(0) + {\cf22 "</td>\\}\par
  342 {\cf22     <td>"} + generateStatusDropdown(1) + {\cf22 "</td>\\}\par
  343 {\cf22     <td>"} + generateStatusDropdown(2) + {\cf22 "</td>\\}\par
  344 {\cf22     <td>"} + generateStatusDropdown(3) + {\cf22 "</td>\\}\par
  345 {\cf22     <td>"} + generateStatusDropdown(4) + {\cf22 "</td>\\}\par
  346 {\cf22   </tr>\\}\par
  347 {\cf22 </table>\\}\par
  348 {\cf22 <input type='submit' value='Save'>\\}\par
  349 {\cf22 </form>\\}\par
  350 {\cf22 <br /><br />\\}\par
  351 {\cf22 <p><a href='/reset'>Reset all settings and run Wi-Fi setup</a></p>\\}\par
  352 {\cf22   </body>\\}\par
  353 {\cf22 </html>"};\par
  354     webServer.send(200, {\cf22 "text/html"}, temp);\par
  355   \}\par
  356 \}\par
}
}
{\xe \v handleSetAP\:Web.ino}
{\xe \v Web.ino\:handleSetAP}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
void handleSetAP ()}}
\par
{\bkmkstart AAAAAAAADL}
{\bkmkend AAAAAAAADL}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
{\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
Save settings from setup wizard and restart to use them. \par
}{
Definition at line 491 of file Web.ino.}\par
{
\pard\plain \s41\li360\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid   491                    \{\par
  492   ssid = urlDecode(webServer.arg({\cf22 "ssid"}));\par
  493   wifipsk = rot(urlDecode(webServer.arg({\cf22 "pass"})));\par
  494   EAP_IDENTITY = rot(urlDecode(webServer.arg({\cf22 "eapidentity"})));\par
  495   EAP_PASSWORD = rot(urlDecode(webServer.arg({\cf22 "eappass"})));\par
  496   saveConfig();\par
  497 \par
  498   String s = {\cf22 "<h1>Setup complete.</h1><p>Device will be connected to \\""};\par
  499   s += ssid;\par
  500   s += {\cf22 "\\" after the restart.</p>"};\par
  501   s += {\cf22 "<p>Check the IP address displayed on the device and access this page from your web browser to continue the setup process.</p>"};\par
  502   s += {\cf22 "<p>The username and password for the settings portal will be "} + www_username + {\cf22 "/"} + www_password + {\cf22 ".</p>"};\par
  503 \par
  504   s += {\cf22 "<p>You may now close this page.</p>"};\par
  505   webServer.send(200, {\cf22 "text/html"}, makePage({\cf22 "Wi-Fi Settings"}, s));\par
  506   delay(1000); {\cf20 //delay to finish serving the page before restart}\par
  507   ESP.restart();\par
  508 \}\par
}
}
{\xe \v handleSettings\:Web.ino}
{\xe \v Web.ino\:handleSettings}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
void handleSettings ()}}
\par
{\bkmkstart AAAAAAAADM}
{\bkmkend AAAAAAAADM}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
{\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
Serve menu for WPA2-PSK setup. \par
}{
Definition at line 465 of file Web.ino.}\par
{
\pard\plain \s41\li360\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid   465                       \{\par
  466   String s = {\cf22 "<h1>Wi-Fi Settings</h1><p><a href=\\"/\\">Go back</a></p><p>Please enter settings for standard WiFi (WPA2).</p>"};\par
  467   s += {\cf22 "<form method=\\"get\\" action=\\"setap\\">"};\par
  468   s += {\cf22 "<table><tr>"};\par
  469   s += {\cf22 "<td>SSID:</td><td><select name=\\"ssid\\">"};\par
  470   s += ssidList;\par
  471   s += {\cf22 "</select></td></tr><td>Password:</td><td><input name=\\"pass\\" length=64 type=\\"password\\"></td></tr>"};\par
  472   s += {\cf22 "<tr><td><input type=\\"submit\\"></td></tr></table></form>"};\par
  473   webServer.send(200, {\cf22 "text/html"}, makePage({\cf22 "Wi-Fi Settings"}, s));\par
  474 \}\par
}
}
{\xe \v handleSetupRoot\:Web.ino}
{\xe \v Web.ino\:handleSetupRoot}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
void handleSetupRoot ()}}
\par
{\bkmkstart AAAAAAAADN}
{\bkmkend AAAAAAAADN}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
{\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
Serve main menu of setup wizard (WPA2-PSK / WPA2-ENTERPRISE). \par
}{
Definition at line 456 of file Web.ino.}\par
{
\pard\plain \s41\li360\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid   456                        \{\par
  457   String s = {\cf22 "<h1>Lecturer availability door announcer</h1>"};\par
  458   s += {\cf22 "<p>Final year BEng project by Chris Stubbs (2019)</p>"};\par
  459   s += {\cf22 "<p><a href=\\"/settings\\">Setup wizard for standard WiFi (WPA2)</a></p>"};\par
  460   s += {\cf22 "<p><a href=\\"/eduroam\\">Setup wizard for eduroam (WPA2-Enterprise)</a></p>"};\par
  461   webServer.send(200, {\cf22 "text/html"}, makePage({\cf22 "Setup Wizard"}, s));\par
  462 \}\par
}
}
{\xe \v makePage\:Web.ino}
{\xe \v Web.ino\:makePage}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
String makePage (String  {\i title}, String  {\i contents})}}
\par
{\bkmkstart AAAAAAAADO}
{\bkmkend AAAAAAAADO}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
{\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
Generate basic HTML tags around content. \par
}{
Definition at line 227 of file Web.ino.}\par
{
\pard\plain \s41\li360\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid   227                                                \{\par
  228   String s = {\cf22 "<!DOCTYPE html><html><head>"};\par
  229   s += {\cf22 "<meta name=\\"viewport\\" content=\\"width=device-width,user-scalable=0\\">"};\par
  230   s += {\cf22 "<title>Lecturer availability door announcer</title>"};\par
  231   s += {\cf22 "<style> body \{ background-color: #cccccc; font-family: Arial, Helvetica, Sans-Serif; Color: #000088; \} </style>"};\par
  232   s += {\cf22 "</head><body>"};\par
  233   s += contents;\par
  234   s += {\cf22 "</body></html>"};\par
  235   {\cf19 return} s;\par
  236 \}\par
}
}
{\xe \v ring\:Web.ino}
{\xe \v Web.ino\:ring}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
void ring (const int  {\i bus})}}
\par
{\bkmkstart AAAAAAAADP}
{\bkmkend AAAAAAAADP}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
{\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
Send a webhooks request to IFTTT with the room name and appropraite lecturers key. Display status on screen. Input = 0...7. \par
}{
Definition at line 20 of file Web.ino.}\par
{
\pard\plain \s41\li360\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid    21 \{\par
   22   lastPressed = millis(); {\cf20 //record the button was pressed for sleep mode}\par
   23   {\cf19 if} (lecturerStatus[bus] == {\cf22 "Available"}) \{\par
   24     digitalWrite(LEDAVAILPIN, HIGH);\par
   25   \} {\cf19 else} \{\par
   26     digitalWrite(LEDBUSYPIN, HIGH);\par
   27   \}\par
   28   {\cf19 if} (lecturerStatus[bus] == {\cf22 "Available"} or busyNotif)\par
   29   \{\par
   30     display.setRotation(1);\par
   31     display.fillScreen(GxEPD_WHITE);\par
   32     display.setTextColor(GxEPD_BLACK);\par
   33     display.setFont(font);\par
   34     display.setCursor(0, 16 * 4);\par
   35     display.print({\cf22 "Contacting "}); display.print(lecturerNames[bus]); display.println({\cf22 "..."});\par
   36     display.update();\par
   37     {\cf19 if} ((WiFi.status() == WL_CONNECTED)) \{\par
   38       HTTPClient http;\par
   39       Serial.println((String){\cf22 "[INFO] HTTP Req: https://maker.ifttt.com/trigger/"} + room + {\cf22 "/with/key/"} + lecturerIFTTkeys[bus]);\par
   40       http.begin((String){\cf22 "https://maker.ifttt.com/trigger/"} + room + {\cf22 "/with/key/"} + lecturerIFTTkeys[bus]);\par
   41       {\cf18 int} httpCode = http.GET();\par
   42       {\cf19 if} (httpCode > 0) \{\par
   43         String payload = http.getString();\par
   44         Serial.println((String){\cf22 "[INFO] httpCode: "} + httpCode);\par
   45         Serial.println((String){\cf22 "[INFO] payload: "} + payload);\par
   46         {\cf19 if} (httpCode != 200) \{\par
   47           {\cf20 //Error communicating with IFTTT service.}\par
   48           {\cf19 if} (httpCode == 302) \{\par
   49             {\cf20 //"Temporarily moved" (common error for no key)}\par
   50             errorMsg({\cf22 "Error communicating with \\nIFTTT.\\n\\nDid you set the room and\\nlecturer key?"});\par
   51           \}\par
   52           errorMsg({\cf22 "Error communicating with IFTTT "} + (String)httpCode + {\cf22 " "} + payload);\par
   53           errorMsg({\cf22 "Req: "} + (String){\cf22 "https://maker.ifttt.com/trigger/"} + room + {\cf22 "/with/key/"} + lecturerIFTTkeys[bus]);\par
   54         \}\par
   55         {\cf19 if} (httpCode == 200) \{\par
   56           {\cf20 //success}\par
   57           digitalWrite(LEDOKPIN, HIGH);\par
   58           display.setRotation(1);\par
   59           display.fillScreen(GxEPD_WHITE);\par
   60           display.setTextColor(GxEPD_BLACK);\par
   61           display.setFont(font);\par
   62           display.setCursor(0, 16 * 4);\par
   63           {\cf19 if} (lecturerStatus[bus] == {\cf22 "Available"}) \{\par
   64             display.println(wordWrap(lecturerNames[bus] + {\cf22 " has been notified."}));\par
   65           \} {\cf19 else} \{\par
   66             display.println(wordWrap(lecturerNames[bus] + {\cf22 " has been notified, but may be busy."}));\par
   67           \}\par
   68           display.update();\par
   69         \}\par
   70       \}\par
   71       {\cf19 else} \{\par
   72         errorMsg({\cf22 "Unknown error in HTTP request."});\par
   73       \}\par
   74       http.end(); {\cf20 //Free the resources}\par
   75     \} {\cf19 else} \{\par
   76       errorMsg({\cf22 "Wifi not connected. Restarting in 30 seconds."});\par
   77       delay(30000);\par
   78       ESP.restart();\par
   79     \}\par
   80     delay(5000);\par
   81     digitalWrite(LEDOKPIN, LOW);\par
   82     digitalWrite(LEDAVAILPIN, LOW);\par
   83     digitalWrite(LEDBUSYPIN, LOW);\par
   84     writeNames();\par
   85   \} {\cf19 else} \{\par
   86     display.setRotation(1);\par
   87     display.fillScreen(GxEPD_WHITE);\par
   88     display.setTextColor(GxEPD_BLACK);\par
   89     display.setFont(font);\par
   90     display.setCursor(0, 16 * 4);\par
   91     display.println(wordWrap((String)lecturerNames[bus] + {\cf22 " is busy/away."}));\par
   92     display.println({\cf22 "Please try again later."});\par
   93     display.update();\par
   94     delay(3000);\par
   95     digitalWrite(LEDOKPIN, LOW);\par
   96     digitalWrite(LEDAVAILPIN, LOW);\par
   97     digitalWrite(LEDBUSYPIN, LOW);\par
   98     writeNames();\par
   99   \}\par
  100 \}\par
}
}
{\xe \v saveSettings\:Web.ino}
{\xe \v Web.ino\:saveSettings}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
void saveSettings ()}}
\par
{\bkmkstart AAAAAAAADQ}
{\bkmkend AAAAAAAADQ}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
{\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
Save settings recieved from the web config interface to SPIFFS and load them into current memory. \par
}{
Definition at line 385 of file Web.ino.}\par
{
\pard\plain \s41\li360\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid   385                     \{\par
  386   {\cf19 if} (!webServer.authenticate(&www_username[0u], &www_password[0u])) \{\par
  387     {\cf19 return} webServer.requestAuthentication();\par
  388     webServer.send(200, {\cf22 "text/plain"}, {\cf22 "Login OK"});\par
  389   \}\par
  390   {\cf19 else} \{\par
  391     room = webServer.arg({\cf22 "room"});\par
  392     busyNotif = (webServer.arg({\cf22 "busyNotif"}) == {\cf22 "on"}); {\cf20 //true if checked}\par
  393     powerSave = (webServer.arg({\cf22 "powerSave"}) == {\cf22 "on"}); {\cf20 //true if checked}\par
  394     thres = webServer.arg({\cf22 "threshold"}).toFloat();\par
  395     sleepDelay = webServer.arg({\cf22 "sleepDelay"}).toInt();\par
  396     www_password = webServer.arg({\cf22 "adminpw"});\par
  397     lecturerNames[0] = webServer.arg({\cf22 "l1name"});\par
  398     lecturerNames[1] = webServer.arg({\cf22 "l2name"});\par
  399     lecturerNames[2] = webServer.arg({\cf22 "l3name"});\par
  400     lecturerNames[3] = webServer.arg({\cf22 "l4name"});\par
  401     lecturerNames[4] = webServer.arg({\cf22 "l5name"});\par
  402     lecturerIFTTkeys[0] = webServer.arg({\cf22 "l1key"});\par
  403     lecturerIFTTkeys[1] = webServer.arg({\cf22 "l2key"});\par
  404     lecturerIFTTkeys[2] = webServer.arg({\cf22 "l3key"});\par
  405     lecturerIFTTkeys[3] = webServer.arg({\cf22 "l4key"});\par
  406     lecturerIFTTkeys[4] = webServer.arg({\cf22 "l5key"});\par
  407     lecturerStatus[0] = webServer.arg({\cf22 "l1status"});\par
  408     lecturerStatus[1] = webServer.arg({\cf22 "l2status"});\par
  409     lecturerStatus[2] = webServer.arg({\cf22 "l3status"});\par
  410     lecturerStatus[3] = webServer.arg({\cf22 "l4status"});\par
  411     lecturerStatus[4] = webServer.arg({\cf22 "l5status"});\par
  412     String out = {\cf22 ""};\par
  413     out += {\cf22 "Saved!\\n"};\par
  414     out += {\cf22 "<a href='/'>Go back</a>\\n"};\par
  415     webServer.send(200, {\cf22 "text/html"}, out);\par
  416     saveConfig(); {\cf20 //commit new settings to config file}\par
  417     writeNames(); {\cf20 //update the display}\par
  418   \}\par
  419 \}\par
}
}
{\xe \v setupMode\:Web.ino}
{\xe \v Web.ino\:setupMode}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
void setupMode ()}}
\par
{\bkmkstart AAAAAAAADR}
{\bkmkend AAAAAAAADR}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
{\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
Prepare and start the setup wizard with list of scanned SSIDs. \par
}{
Definition at line 196 of file Web.ino.}\par
{
\pard\plain \s41\li360\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid   196                  \{\par
  197   {\cf20 //Disconnect any connections and scan for AP's}\par
  198   WiFi.mode(WIFI_STA);\par
  199   WiFi.disconnect();\par
  200   delay(100);\par
  201   {\cf18 int} n = WiFi.scanNetworks();\par
  202   delay(100);\par
  203   Serial.println({\cf22 ""});\par
  204   {\cf19 for} ({\cf18 int} i = 0; i < n; ++i) \{\par
  205     ssidList += {\cf22 "<option value=\\""};\par
  206     ssidList += WiFi.SSID(i);\par
  207     ssidList += {\cf22 "\\">"};\par
  208     ssidList += WiFi.SSID(i);\par
  209     ssidList += {\cf22 "</option>"};\par
  210   \}\par
  211   delay(100);\par
  212   {\cf20 //Create config AP}\par
  213   WiFi.mode(WIFI_AP);\par
  214   delay(250);\par
  215   WiFi.softAPConfig(apIP, apIP, IPAddress(255, 255, 255, 0));\par
  216   delay(250);\par
  217   WiFi.softAP(apSSID);\par
  218   delay(250);\par
  219   dnsServer.setErrorReplyCode(DNSReplyCode::NoError);\par
  220   dnsServer.start(53, {\cf22 "*"}, apIP);\par
  221   Serial.println((String){\cf22 "[INFO] DNS server started"});\par
  222   startWebServer();\par
  223   Serial.println((String){\cf22 "[INFO] Starting Access Point at "} + apSSID);\par
  224 \}\par
}
}
{\xe \v startWebServer\:Web.ino}
{\xe \v Web.ino\:startWebServer}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
void startWebServer ()}}
\par
{\bkmkstart AAAAAAAADS}
{\bkmkend AAAAAAAADS}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
{\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
Start the appropriate web server depending on if the mode is normal or setup mode. \par
}{
Definition at line 175 of file Web.ino.}\par
{
\pard\plain \s41\li360\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid   175                       \{\par
  176   {\cf19 if} (settingMode) \{ {\cf20 //Set up webserver to serve captive portal for wifi setup wizard}\par
  177     setupMsg(apSSID); {\cf20 //Display setup screen}\par
  178     webServer.on({\cf22 "/settings"}, handleSettings);\par
  179     webServer.on({\cf22 "/eduroam"}, handleEduroam);\par
  180     webServer.on({\cf22 "/setap"}, handleSetAP);\par
  181     webServer.onNotFound(handleSetupRoot);\par
  182   \}\par
  183   {\cf19 else} \{ {\cf20 //Set up webserver to serve normal setup page}\par
  184     Serial.print({\cf22 "[INFO] Starting Web Server at "});\par
  185     Serial.println(WiFi.localIP().toString());\par
  186     addToLog((String){\cf22 "IP addr: "} + WiFi.localIP().toString());\par
  187     webServer.on({\cf22 "/"}, handleRoot);\par
  188     webServer.on({\cf22 "/reset"}, handleReset);\par
  189     webServer.on({\cf22 "/savesettings.do"}, saveSettings);\par
  190     webServer.onNotFound(handleNotFound);\par
  191   \}\par
  192   webServer.begin();\par
  193 \}\par
}
}
{\xe \v urlDecode\:Web.ino}
{\xe \v Web.ino\:urlDecode}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
String urlDecode (String  {\i input})}}
\par
{\bkmkstart AAAAAAAADT}
{\bkmkend AAAAAAAADT}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
{\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
Replace URL encoded characters. \par
}{
Definition at line 239 of file Web.ino.}\par
{
\pard\plain \s41\li360\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid   239                                \{\par
  240   String s = input;\par
  241   s.replace({\cf22 "%20"}, {\cf22 " "});\par
  242   s.replace({\cf22 "+"}, {\cf22 " "});\par
  243   s.replace({\cf22 "%21"}, {\cf22 "!"});\par
  244   s.replace({\cf22 "%22"}, {\cf22 "\\""});\par
  245   s.replace({\cf22 "%23"}, {\cf22 "#"});\par
  246   s.replace({\cf22 "%24"}, {\cf22 "$"});\par
  247   s.replace({\cf22 "%25"}, {\cf22 "%"});\par
  248   s.replace({\cf22 "%26"}, {\cf22 "&"});\par
  249   s.replace({\cf22 "%27"}, {\cf22 "\\'"});\par
  250   s.replace({\cf22 "%28"}, {\cf22 "("});\par
  251   s.replace({\cf22 "%29"}, {\cf22 ")"});\par
  252   s.replace({\cf22 "%30"}, {\cf22 "*"});\par
  253   s.replace({\cf22 "%31"}, {\cf22 "+"});\par
  254   s.replace({\cf22 "%2C"}, {\cf22 ","});\par
  255   s.replace({\cf22 "%2E"}, {\cf22 "."});\par
  256   s.replace({\cf22 "%2F"}, {\cf22 "/"});\par
  257   s.replace({\cf22 "%2C"}, {\cf22 ","});\par
  258   s.replace({\cf22 "%3A"}, {\cf22 ":"});\par
  259   s.replace({\cf22 "%3A"}, {\cf22 ";"});\par
  260   s.replace({\cf22 "%3C"}, {\cf22 "<"});\par
  261   s.replace({\cf22 "%3D"}, {\cf22 "="});\par
  262   s.replace({\cf22 "%3E"}, {\cf22 ">"});\par
  263   s.replace({\cf22 "%3F"}, {\cf22 "?"});\par
  264   s.replace({\cf22 "%40"}, {\cf22 "@"});\par
  265   s.replace({\cf22 "%5B"}, {\cf22 "["});\par
  266   s.replace({\cf22 "%5C"}, {\cf22 "\\\\"});\par
  267   s.replace({\cf22 "%5D"}, {\cf22 "]"});\par
  268   s.replace({\cf22 "%5E"}, {\cf22 "^"});\par
  269   s.replace({\cf22 "%5F"}, {\cf22 "-"});\par
  270   s.replace({\cf22 "%60"}, {\cf22 "`"});\par
  271   {\cf19 return} s;\par
  272 \}\par
}
}
{\xe \v wifiTasks\:Web.ino}
{\xe \v Web.ino\:wifiTasks}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
void wifiTasks ()}}
\par
{\bkmkstart AAAAAAAADU}
{\bkmkend AAAAAAAADU}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
{\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
Run background WiFi DNS server and webserver tasks. \par
}{
Definition at line 12 of file Web.ino.}\par
{
\pard\plain \s41\li360\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid    12                  \{\par
   13   {\cf19 if} (settingMode) \{\par
   14     dnsServer.processNextRequest();\par
   15   \}\par
   16   webServer.handleClient();\par
   17 \}\par
}
}
{\pard\widctlpar\brdrb\brdrs\brdrw5\brsp20 \adjustright \par}
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Variable Documentation\par
\pard\plain 
{\xe \v apSSID\:Web.ino}
{\xe \v Web.ino\:apSSID}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
const char* apSSID = "_SETUP"}}
\par
{\bkmkstart AAAAAAAADV}
{\bkmkend AAAAAAAADV}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
\par
{
{\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
Name of SSID for setup wizard access point. }}\par
{
Definition at line 8 of file Web.ino.}\par
}
{\xe \v ssidList\:Web.ino}
{\xe \v Web.ino\:ssidList}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
String ssidList}}
\par
{\bkmkstart AAAAAAAADW}
{\bkmkend AAAAAAAADW}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
\par
{
{\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
List of all detected SSIDs from scan. }}\par
{
Definition at line 9 of file Web.ino.}\par
}

\pard\plain \sect\sbknone
{\pard\widctlpar\brdrb\brdrs\brdrw75\brsp20 \adjustright \par}
\s1\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs36\kerning36\cgrid 
\s1\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs36\kerning36\cgrid Index\par 
\pard\plain 
{\tc \v Index}
{\field\fldedit {\*\fldinst INDEX \\c2 \\*MERGEFORMAT}{\fldrslt INDEX}}
}